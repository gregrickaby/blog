
    <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0">
      <channel>
        <title>Greg Rickaby</title>
        <link>https://gregrickaby.com</link>
        <description>Personal Blog</description>
        <language>en</language>
        <lastBuildDate>2021-01-06T22:41:01.926Z</lastBuildDate>
        <atom:link href="https://gregrickaby.com" rel="self" type="application/rss+xml"/>
        
            <item>
              <guid>https://gregrickaby.com/blogs/123-test</guid>
              <title>123 Test</title>
              <description>This is an excerpt</description>
              <link>https://gregrickaby.com/posts/123-test</link>
              <pubDate>2020-12-31T06:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
# This file is for testing purposes

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Tu vero, inquam, ducas licet, si sequetur; Haec et tu ita posuisti, et verba vestra sunt. Atque his de rebus et splendida est eorum et illustris oratio. Eam stabilem appellas. Nam Pyrrho, Aristo, Erillus iam diu abiecti. Illa sunt similia: hebes acies est cuipiam oculorum, corpore alius senescit; Est enim effectrix multarum et magnarum voluptatum. Duo Reges: constructio interrete. Fortasse id optimum, sed ubi illud: Plus semper voluptatis? Nihil enim hoc differt. Hoc enim constituto in philosophia constituta sunt omnia. Dat enim intervalla et relaxat. Aliena dixit in physicis nec ea ipsa, quae tibi probarentur; Tecum optime, deinde etiam cum mediocri amico. Ait enim se, si uratur, Quam hoc suave! dicturum. Respondent extrema primis, media utrisque, omnia omnibus.

## This is an H2

Ita multo sanguine profuso in laetitia et in victoria est mortuus. Quae duo sunt, unum facit. Expectoque quid ad id, quod quaerebam, respondeas. At ille pellit, qui permulcet sensum voluptate. Illud dico, ea, quae dicat, praeclare inter se cohaerere. Stoici autem, quod finem bonorum in una virtute ponunt, similes sunt illorum; Tum Torquatus: Prorsus, inquit, assentior; Ut aliquid scire se gaudeant? Quippe: habes enim a rhetoribus; Minime vero, inquit ille, consentit. Luxuriam non reprehendit, modo sit vacua infinita cupiditate et timore. Sed plane dicit quod intellegit. Re mihi non aeque satisfacit, et quidem locis pluribus. Mihi enim satis est, ipsis non satis. Fortemne possumus dicere eundem illum Torquatum? Beatus sibi videtur esse moriens.

### This is an H3

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Non enim, si omnia non sequebatur, idcirco non erat ortus illinc. Quae quo sunt excelsiores, eo dant clariora indicia naturae. Si qua in iis corrigere voluit, deteriora fecit. Videsne quam sit magna dissensio? Haec bene dicuntur, nec ego repugno, sed inter sese ipsa pugnant. At enim hic etiam dolore. Quid ergo aliud intellegetur nisi uti ne quae pars naturae neglegatur? Sit hoc ultimum bonorum, quod nunc a me defenditur; An me, inquis, tam amentem putas, ut apud imperitos isto modo loquar?

#### This is an H4

Sed tu istuc dixti bene Latine, parum plane. Obsecro, inquit, Torquate, haec dicit Epicurus? Prioris generis est docilitas, memoria; Duo Reges: constructio interrete. Sed virtutem ipsam inchoavit, nihil amplius. Terram, mihi crede, ea lanx et maria deprimet. Isto modo ne improbos quidem, si essent boni viri. Si quicquam extra virtutem habeatur in bonis. Stuprata per vim Lucretia a regis filio testata civis se ipsa interemit. Habent enim et bene longam et satis litigiosam disputationem. Eadem nunc mea adversum te oratio est. Quae iam oratio non a philosopho aliquo, sed a censore opprimenda est. Cupiditates non Epicuri divisione finiebat, sed sua satietate.

1. Café at pot dark plunger sugar whipped cappuccino.
2. Filter spoon aftertaste that sugar medium half espresso doppio white mocha aftertaste.
3. Saucer body saucer lait shop aged robust strong shot as.

- Extra bar redeye barista pumpkin extra coffee spoon brewed.
- Extra saucer café in bar robusta instant shot filter et shop decaffeinated french.
- Arabica black medium go organic go doppio americano mazagran instant iced doppio dark.

##### This is an H5

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nummus in Croesi divitiis obscuratur, pars est tamen divitiarum. Optime, inquam. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres. Illa tamen simplicia, vestra versuta. Duo Reges: constructio interrete. Quod cum dixissent, ille contra. Si verbum sequimur, primum longius verbum praepositum quam bonum. Servari enim iustitia nisi a forti viro, nisi a sapiente non potest. Experiamur igitur, inquit, etsi habet haec Stoicorum ratio difficilius quiddam et obscurius. Cuius ad naturam apta ratio vera illa et summa lex a philosophis dicitur. Addidisti ad extremum etiam indoctum fuisse. Quis, quaeso, illum negat et bonum virum et comem et humanum fuisse? Ut optime, secundum naturam affectum esse possit. Etenim semper illud extra est, quod arte comprehenditur.

###### This is an H6

<address>Sample Address</address>
<address>3157 County Rd 156</address>
<address>Enterprise, AL 36330</address>

```php
/**
 * Get related posts.
 *
 * @param array   $args   WP_Query arguments.
 * @return object         The related posts object.
 * @author Greg Rickaby
 */
function wds_client_get_related_posts( $args = array() ) {

	// Set transient key.
	$transient_key = 'wds_client_related_posts_' . get_the_ID();

	// Attempt to fetch from cache.
	$related_posts = get_transient( $transient_key );

	// If a transient isn't available, run WP_Query...
	if ( false === ( $related_posts ) ) {

		// The default related term type.
		$term_type = 'tag';

		// Attempt to get the category.
		$term_ids = wp_get_object_terms( get_the_ID(), 'post_tag', array( 'fields' => 'ids' ) );

		// Fallback to category if no tag is present.
		if ( empty( $term_ids ) ) {
			$term_type = 'category';
			$term_ids = wp_get_object_terms( get_the_ID(), 'category', array( 'fields' => 'ids' ) );
		}

		// Setup default WP_Query args.
		$defaults = array(
			"{$term_type}__in"       => $term_ids,
			'ignore_sticky_posts'    => 1,
			'no_found_rows'          => true,
			'orderby'                => 'date',
			'order'                  => 'DESC',
			'posts_per_page'         => 3,
			'post__not_in'           => array( get_the_ID() ),
			'update_post_meta_cache' => false,
			'update_post_term_cache' => false,
		);

		// Parse arguments.
		$args = wp_parse_args( $args, $defaults );

		// Run the query!
		$related_posts = new WP_Query( $args );

		// Finally, story the data for 24 hours.
		set_transient( $transient_key, $related_posts, 24 * HOUR_IN_SECONDS );
	}

	return $related_posts;
}
```

**Un-ordered List**

- List item 1
- List item 2
- List item 3

**Ordered List**

1.  List item 1
2.  List item 2
3.  List item 3

**Blockquote**

> "Tis better to give than receive" - someone

https://www.youtube.com/watch?v=xEhaVhta7sI

http://vimeo.com/51727394

```markdown
[Text you want to see](http://url-goes-here.com)
```

```bash[data-user="chris"][data-host="remotehost"][data-output="2,4-8"]
pwd
/usr/home/chris/bin
ls -la
total 2
drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .
drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..
-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup
-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy
```

```diff-javascript[class="diff-highlight"]
@@ -4,6 +4,5 @@
-  let foo = bar.baz([1, 2, 3]);
-  foo = foo + 1;
+  const foo = bar.baz([1, 2, 3]) + 1;
   console.log(`foo: ${foo}`);
```

```css
span.foo {
  background-color: navy;
  color: #bfd;
}

span.bar {
  background: rgba(105, 0, 12, 0.38);
  color: hsl(30, 100%, 50%);
  border-color: transparent;
}
```

```html[legend="file.html"]{1,3-4,8}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Hello World!</title>
  </head>
  <body>
    <h1>Hello World!</h1>
  </body>
</html>
```

```tsx{13-19}
export default () => {
  // register current used theme
  const [theme, setTheme] = React.useState(themes.light);

  // handle the radio changes
  const handleChange = ({ target }) => {
    // based on the radio value, toggle to the correct theme
    return setTheme(themes[target.value]);
  };

  return (
    <ThemeProvider value={theme}>
      <Button>I am styled by theme context!</Button>
      <form onChange={handleChange}>
        <p>Please select your theme:</p>
        <input type="radio" id="light" name="theme" value="light" />
        <label for="light">Light</label>
        <input type="radio" id="dark" name="theme" value="dark" />
        <label for="dark">Dark</label>
      </form>
    </ThemeProvider>
  );
};
```

```html[class="line-numbers"]{1,3-4,8}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Hello World!</title>
  </head>
  <body>
    <h1>Hello World!</h1>
  </body>
</html>
```

```
hello
world
```

```treeview
.
├── .eslintignore
├── .eslintrc
├── .gitignore
├── .prettierignore
├── .prettierrc
├── .yarnrc.yml
├── README.md
├── index.js
├── package.json
├── test/
│   ├── fixtures/
│   └── index.js
└── yarn.lock

7 directories, 41 files
```
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/displaying-exif-data-in-wordpress</guid>
              <title>Displaying EXIF Data in WordPress</title>
              <description>EXIF data is really powerful. Use it to enhance your photostreams.</description>
              <link>https://gregrickaby.com/posts/displaying-exif-data-in-wordpress</link>
              <pubDate>2020-06-24T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
Over the last 6-months I've taken a half-dozen or so courses on [LinkedIn Learning](https://www.linkedin.com/learning/), read a couple of books, and spent countless hours taking photos trying to level up my skills as a [very amateur photographer](https://gregrickaby.com/category/photos).

For me, the technical side of photography is a lot of fun; so when I'm admiring people's work, I love to look at the technical details behind a photograph. Such as, _aperture_, _ISO_, and _shutter speed_ (also known as the [exposure triangle](https://photo.stackexchange.com/a/12441)) as a beginner, these details are just as interesting as the photo itself.

The standard for saving all kinds of technical details inside a JPG image is called, "Exchangeable Image File Format" -- or [EXIF](https://en.wikipedia.org/wiki/Exif) for short. I'll show you how to quickly display some of those details using a WordPress shortcode.

## Preface

Before I get into how to display the EXIF data, first we need to talk about image compression on the web. [It's kind of a big deal](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization) and is a billion dollar business.

In an effort to achieve perfect scores on [Google PageSpeed](https://developers.google.com/speed/pagespeed/insights/), Web developers will often smush out every byte of data from their codebase-- including images. Often a developer will rely on a 3rd party image compression service like Cloudinary, [re.Smush.it](https://resmush.it/), or Ewww. Well, what's the first thing those image compression services do? Strip out any EXIF data for an easy win.

**TL;DR: If you want to share and display EXIF data, you may need to tell your photo editor and any image smushing services to preserve it.**

![](/blog/images/Screenshot-2020-06-23-21.19.41-1920x891.png)

Make sure your images have EXIF data to begin with.

## WordPress plays nice with EXIF, mostly.

When you upload a JPG to WordPress, it will scan and save most available EXIF data as [post meta](https://designmodo.com/wordpress-post-meta/). No plugin or configuration needed!

![](/blog/images/Screenshot-2020-06-23-21.14.28.png)

EXIF data stored as post meta in the WordPress database.

WordPress doesn't save all the data though, it ignores both _Location_ and _Lens_ data. Displaying the EXIF data is a bit more complicated than just clicking "upload" though. Let's move on...

## Finding the EXIF data in the database

Because WordPress saves this as post meta, you can use the `get_post_meta()` function to grab it, _if_ you know the image ID. One simple way to find the ID is by opening any image in the Media Library, and looking at your web browser's address bar:

![](/blog/images/Screenshot-2020-06-23-20.44.22.png)

The image ID is can be located in the address bar.

Once you have the image ID, you could grab the data:

```php
$data = get_post_meta( '22579', '_wp_attachment_metadata' );
```

Which would return:

```php
array (
  [0] => array (
    [width] => 2048
    [height] => 1412
    [file] => 2020/06/P1150618.jpg
    [image_meta] => array (
      [aperture] => 5.6
      [camera] => DMC-G81
      [created_timestamp] => 1592060239
      [focal_length] => 109
      [iso] => 3200
      [shutter_speed] => 0.01
     )
  )
)
```

Now that you have an array of data, you could use PHP [array destructuring](https://stitcher.io/blog/array-destructuring-with-list-in-php) to both pluck _and_ set your data variables at the same time:

```php
// Destructure image meta array, and set variables.
[
  'aperture'          => $aperture,
  'camera'            => $camera,
  'created_timestamp' => $timestamp,
  'focal_length'      => $focal_length,
  'iso'               => $iso,
  'shutter_speed'     => $shutter_speed,
] = $data[0]['image_meta'];
```

Now that you have the data, you could display it with:

```php
<?php echo esc_html( $camera ); ?>
```

## Shortcode

I built a very simple shortcode to display EXIF data. The [code is available on Github](https://github.com/gregrickaby/wordpress-display-exif) and you're free to fork (or contribute) and use however you'd like.

The shortcode is super simple, and displays _Timestamp_, _Camera_, _Aperture_, _ISO_, _Shutter Speed_, and _Focal Length_. Because WordPress doesn't save _Location_ or _Lens information_, you would have to pass that in yourself using arguments. Here's the basic usage:

```
[exif id="12345" location="Enterprise, AL" lens="Panasonic Lumix G Vario 45-150mm"]
```

Which would display this:

![](/blog/images/Screenshot-2020-06-23-20.41.48.png)

EXIF data from one of the images on this website.

## Bonus: Browser Extensions

There are a couple of browser extensions which display EXIF data

- [Exify](https://addons.mozilla.org/en-US/firefox/addon/exify/) (Firefox)
- [Exif Viewer Classic](https://chrome.google.com/webstore/detail/exif-viewer-classic/nafpfdcmppffipmhcpkbplhkoiekndck) (Chrome)

There's also a JavaScript library for reading EXIF data, and claims to be the fastest and most versatile way to do it:

- [Exifr](https://github.com/MikeKovarik/exifr) (Github)

## Wrap up

EXIF data can be helpful for budding photographers like myself. It's interesting to see what type of gear photographers use, and how they composed their photos using the exposure triangle.

I hope you find [the shortcode](https://github.com/gregrickaby/wordpress-display-exif) helpful!
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/reddit-image-viewer</guid>
              <title>Reddit Image Viewer</title>
              <description>Learn how I built a Reddit image viewer as a hobby app.</description>
              <link>https://gregrickaby.com/posts/reddit-image-viewer</link>
              <pubDate>2020-06-16T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
**TL;DR** [**https://reddit-image-viewer.vercel.app**](https://reddit-image-viewer.vercel.app)

I've been deep diving with [React](https://reactjs.org/) and [Next.js](https://nextjs.org) lately. A big part of that immersion, is the simplicity of Next.js. For me, Next.js has the perfect amount of abstraction…somewhere between [Create React App](https://github.com/facebook/create-react-app) and [Gatsby.](https://gatsbyjs.org) You don't have to know Webpack or routing, but you're also not locked into an opinionated way of doing React things alongside Node.

> Next.js just blends into the background, so you can focus on building components and ship a static (or SSR) website in no time.

Anyway, there are a bunch of other Reddit image websites and apps out there, but I've always wanted to create my own. Here goes...

## About

The Reddit Image Viewer app uses Next.js as the platform, the [React Hooks](https://reactjs.org/docs/hooks-intro.html) `useEffect()`and `useState()`, relies on native [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to grab the data, and [React Cool Image](https://github.com/wellyshen/react-cool-img) to lazy-load the media of any subreddit. I also hooked up [Tailwind CSS](https://tailwindcss.com/) for styling the cards and grid.

<video autoPlay loop muted playsInline controls className="">
  <source src="/blog/images/reddit-image-viewer.webm" type="video/webm" />
  <source src="/blog/images/reddit-image-viewer.mp4" type="video/mp4" />
</video>

## Challenges

There were some challenges though, like dealing with [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) since web browsers are becoming more and more strict on cross-site content. Luckily, I was able to use [CORS Anywhere](https://github.com/Rob--W/cors-anywhere) to get around this.

Parsing the JSON for embeds was difficult too. Reddit allows all types of embedded media, so being able to check for, and display certain types of media was definitely a fun little challenge, and I ended up [building a switch statement](https://github.com/gregrickaby/reddit-image-viewer/blob/master/components/Card.js#L29-L81).

Another gotcha? Reddit encodes rich media, like videos, so I had to [decode it](https://github.com/gregrickaby/reddit-image-viewer/blob/master/components/Card.js#L8-L14) into a &lt;textarea&gt; before I could render out the markup.

I really like the "live search" functionality, but hitting an API each time someone types a letter doesn't work. I used another React Hook called `useDebounce()` to force the search bar to wait 1 second before sending a fetch request.

But the biggest lesson I learned on this project? How to do inline `if/else` statements in React components! A topic that is worth its very own blog post, and makes me very excited for [React Suspense](https://reactjs.org/docs/concurrent-mode-suspense.html).

## Wrap Up

In the end, the app works pretty well. I've already opened a few issues on Github for some enhancements I'd like to add. All and all, it was a fun learning experience!

Check out the [code on Github](https://github.com/gregrickaby/reddit-image-viewer) and view the live app here: [https://reddit-image-viewer.vercel.app](https://reddit-image-viewer.vercel.app/)
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/swr-examples</guid>
              <title>SWR Examples</title>
              <description></description>
              <link>https://gregrickaby.com/posts/swr-examples</link>
              <pubDate>2020-06-11T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
[SWR](https://swr.now.sh/) is an awesome [React Hook](https://reactjs.org/docs/hooks-intro.html) library for remote data fetching, maintained by the team at [Vercel](https://vercel.com). SWR stands for "[stale-while-revalidating](https://tools.ietf.org/html/rfc5861)", which means, SWR will attempt to load cached data (stale) first, and then fetch new data (revalidate) in the background.

I built a repo with some simple examples, check it out [on Github](https://github.com/gregrickaby/swr-examples)!
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/migrate-a-wordpress-blog-to-gatsby-in-15-minutes</guid>
              <title>Migrate a WordPress Blog to Gatsby in 15 Minutes</title>
              <description></description>
              <link>https://gregrickaby.com/posts/migrate-a-wordpress-blog-to-gatsby-in-15-minutes</link>
              <pubDate>2020-05-18T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
In around 15 you could migrate your WordPress blog to the JAMStack Before you jump in, you're going to need a few things:

- Some familiarity of the command line
- [Node v12+](https://nodejs.org)
- [Gatsby CLI](https://www.gatsbyjs.org/docs/gatsby-cli/)
- [Git](https://git-scm.com/)
- A [Github](https://github.com/) repository
- A JAMStack hosting account. Either [Netlify](https://app.netlify.com/) or [Vercel](https://vercel.com/) work, both are free
- ~15 minutes

## Step 1: Export your blog posts

WordPress makes it easy to export your data to an `*.xml` file. In the WordPress dashboard go to `Tools --> Export`. Select **All content**, then smash the download button.

![export](/blog/images/export-from-wordpress.png)

Place the `*.xml` file somewhere easy to find, like `/Downloads`. Rename the file something easy to spell like, `export.xml`.

## Step 2: Convert your blog posts to Markdown

There's an awesome NPM package called [WordPress Export To Markdown](https://github.com/lonekorean/wordpress-export-to-markdown) by Will Boyd. This package will convert the contents of `export.xml` into markdown _and_ download all the images to your computer. It even comes with a handy wizard to make the conversion a breeze.

**Use NPX to start the conversion:**

```bash
$ npx wordpress-export-to-markdown
```

**Now answer the wizard's questions:**

![wordpress-export-to-markdown-wizard](/blog/images/wordpress-export-to-markdown.png)

**Optional folder structure:**

Gatsby supports using folders as a permalink, so I opted for the `year/month/blog-post-slug/` folder structure while answering the wizard's questions, but you can do whatever you want! Here's a peek at the structure:

```bash
├── 2017
│   ├── 02
│   │   ├── 2016-a-year-in-review
│   │   │   ├── images
│   │   │   └── index.md
│   │   └── creating-a-website-for-dummies-jr
│   │       ├── images
│   │       └── index.md
│   └── 06
│       └── podcasting-sound-like-a-radio-dj
│           └── index.md
```

## Step 3: Create a Gatsby Blog

This starter creates a new Gatsby site that is pre-configured to work with the official Gatsby blog theme and supports MDX.

**Clone down the blog starter:**

```bash
$ gatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog-theme
```

## Step 4: Move your Markdown into Gatsby

The Gatsby starter creates a couple of dummy posts, delete them! They're in the `content/posts` folder. Then drag and drop the `/Downloads/posts` folder you generated with the wizard into `/content`:

![](/blog/images/move-posts-to-gatsby.gif)

## Step 5: Configure Gatsby (Optional)

If you are in a hurry, skip this step. You can always come back to it later.

**Open up `gatsby-config.js` and customize:**

```javascript
module.exports = {
  plugins: [
    {
      resolve: `gatsby-theme-blog`,
      options: {}
    }
  ],
  // Customize your site metadata:
  siteMetadata: {
    title: `Greg's Blog`,
    author: `Greg Rickaby`,
    description: `Blog posts so that I don't have to remember.`,
    social: [
      {
        name: `twitter`,
        url: `https://twitter.com/gregrickaby`
      },
      {
        name: `github`,
        url: `https://github.com/gregrickaby`
      }
    ]
  }
}
```

**Open `src/gatsby-theme-blog/components/bio-content.js` and customize:**

```javascript
import React, {Fragment} from 'react'
import {Styled} from 'theme-ui'

export default () => (
  <Fragment>
    Director of Engineering{' '}
    <Styled.a href="https://webdevstudios.com">@WebDevStudios</Styled.a> /
    Author & Editor{' '}
    <Styled.a href="https://www.wiley.com/">@WileyGlobal</Styled.a>
  </Fragment>
)
```

**Place your favorite selfie in `content/assets/` overwriting `avatar.jpg`**

```bash
content
├── assets
│   └── avatar.jpg
└── posts
```

That should be it for now. You can certainly customize Gatsby to your liking, but that's outside the scope of this blog post.

## Step 6: Start the Gatsby dev server

```bash
$ gatsby develop
```

This will verify that Gatsby can parse all the markdown files and create posts. Gatsby is also going to optimize images for the first time. This could take a while, depending on how many images you have!

## Step 7: Commit your changes and push to Github

Because Gatsby more-or-less clones down the stater, Git is already initialized.

**Make sure you're in the root directory of your new blog, then add your Github repo:**

```bash
$ git remote add origin git@github.com/username/your-repo
```

**Commit your changes and push**

```bash
$ git add . && git commit --message "initial commit" && git push
```

Your repo should look like this:

![github-repo-with-initial-commit](/blog/images/github-repo-with-initial-commit.png)

## Step 8: Setup hosting

For this example, I'm going to use [Vercel](https://vercel.com) because I already have several projects hosted there. You could totaly use Netlify or any other JAMStack host that supports Github integration.

**Once you've signed up (or signed in), you can import a project**

![import-project-into-vercel](/blog/images/import-project-into-vercel.png)

**Under "From Git Repository" click "Continue"**

![select-from-git-repo](/blog/images/select-from-git-repo.png)

**Click "Import Project from Github" and select the Github repo you just pushed to. Click "Import"**

![select-your-git-repo](/blog/images/select-your-repo.png)

Vercel will automatically figure out this is a Gatsby site. Just click "Ok" and wait for the build to complete.

![successful-build](/blog/images/successful-build.png)

Once it's done, you can point your DNS at your new JAMStack blog. 💪

## Conclusion

How'd you do? Were you able to complete the WordPress to Gatsby migration in under 15 minutes? I'd love your feedback!
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/setup-a-local-wordpress-development-environment-on-docker</guid>
              <title>Setup a Local WordPress Development Environment on Docker</title>
              <description></description>
              <link>https://gregrickaby.com/posts/setup-a-local-wordpress-development-environment-on-docker</link>
              <pubDate>2019-12-17T06:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
As I continue to explore Docker, this post will serve as my notes.

I assume assume you already have the following technologies on your computer or know how to install them:

- [Docker](https://www.docker.com/products/docker-desktop)
- [Git](https://git-scm.com/downloads)
- [Node & NPM](https://nodejs.org/en/)
- A terminal app
- Helpful, but optional: [VS Code](https://code.visualstudio.com/) w/ [Docker extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker)

## Installation

Clone WordPress:

```
$ git clone git@github.com:WordPress/wordpress-develop.git
```

Install dependencies:

```
$ cd wordpress-develop && npm i
```

Start Docker containers:

```
$ npm run env:start
```

Install WordPress:

```
$ npm run env:install
```

Build WordPress assets:

```
$ npm run build:dev
```

## Where is everything?

Once you're up and running, you can view the local instance of WordPress: [http://localhost:8889/](http://localhost:8889/)

Logging into WordPress is easy enough:
[http://localhost:8889/wp-admin/](http://localhost:8889/wp-admin/)
user: admin
pass: password

You can also open VS Code and inspect the file and directory structure. You should see something similar:

```
 ├── src
 │   ├── js
 │   ├── wp-admin
 │   ├── wp-content
 │   └── wp-includes
 ├── tests
 │   ├── e2e
 │   ├── phpunit
 │   └── qunit
 └── tools
     ├── local-env
     └── webpack
 ├── .editorconfig
 ├── .env
 ├── .gitignore
 ├── etc....</code>
```

The `/src` directory is where WordPress is located. Here, you can work as you normally did using other local development applications like XAMPP, MAMP, or Local by Flywheel.

The `/tests` directory houses all unit tests used by [@wordpress/scripts](https://www.npmjs.com/package/@wordpress/scripts). You can run tests using NPM.

Finally the `/tools` and root directory are where the scripts for setting up Docker, along with other development related configs are located. You can ignore those.

## Development

Watch for changes:

```
$ npm run watch
```

Run PHP unit tests:

```
$ npm run test:php
```

Run JavaScript unit tests:

```
$ npm run test:e2e
```

Use WP-CLI:

```
$ npm run env:cli
```

_Note:_ Where the documentation mentions running `wp`, run `npm run env:cli` instead. For example, `npm run env:cli scaffold plugin my-plugin --activate`

Check out all the [useful WP-CLI commands](https://developer.wordpress.org/cli/commands/).

## Other

View Docker log files:

```
$ npm run env:logs
```

Pull the latest versions of containers:

```
$ npm run env:pull
```

Stop the containers:

```
$ npm run env:stop
```

Reset the containers:

```
$ npm run env:reset && npm run env:start
```

_Note: this will destroy the Docker containers and create new ones. Make sure you back up your data first!_

Pruning dangling Docker stuffs:

```
$ docker system prune
```

[Learn more about cleaning up](https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes) dangling Docker containers, images, volumes, and networks.

## Gutenberg Development

If you want to contribute to the development of Gutenberg, connecting it to your new local is very easy.

Clone Gutenberg in a new directory outside of `/wordpress-develop`

```
$ git clone git@github.com:WordPress/gutenberg.git && cd gutenberg
```

Install dependencies:

```
$ npm i && npm run build
```

Set the path to WordPress:

```
$ export WP_DEVELOP_DIR=../wordpress-develop
```

Connect Gutenberg and WordPress:

```
$ npm run env connect
```

If you open up the [WordPress dashboard](http://localhost:8889/wp-admin/plugins.php), you should now see the Gutenberg plugin, tests, and example blocks.

![](/blog/images/Screenshot-2019-12-17-15.20.55.png)

Simply activate Gutenberg and any other plugins that you need. Learn more about [getting started](https://developer.wordpress.org/block-editor/contributors/develop/getting-started/), and read about the [Git Workflow](https://developer.wordpress.org/block-editor/contributors/develop/git-workflow/).

## Staying Updated

Because both WordPress and Gutenberg are version controlled, you can simply use `git pull` to bring in the latest changes:

```
$ cd wordpress-develop && git pull && cd ../gutenberg && git pull
```

If you want pull in the latest Docker containers:

```
$ npm run env:pull
```

## Further Reading

- [https://make.wordpress.org/core/2019/08/05/wordpress-local-environment/](https://make.wordpress.org/core/2019/08/05/wordpress-local-environment/)
- [https://make.wordpress.org/core/handbook/](https://make.wordpress.org/core/handbook/)
- [https://github.com/WordPress/wordpress-develop/blob/master/README.md](https://github.com/WordPress/wordpress-develop/blob/master/README.md)
- [https://github.com/WordPress/wordpress-develop/blob/master/package.json](https://github.com/WordPress/wordpress-develop/blob/master/package.json)
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/podcasting-sound-like-a-radio-dj</guid>
              <title>Podcasting: Sound Like a Radio DJ</title>
              <description></description>
              <link>https://gregrickaby.com/posts/podcasting-sound-like-a-radio-dj</link>
              <pubDate>2017-06-02T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
After listening to episode [#265 of Shop Talk Show](http://shoptalkshow.com/episodes/265-on-podcasting/), where Chris Coyer mentioned he wanted to sound "like the guy on the radio"; I was compelled to share my knowledge of radio studios.

I was in the broadcast industry for around 15 years, both as a DJ and eventually as chief engineer. I've built dozens of studios...

Chris,

Below is a laundry list of equipment you might find in a typical radio station.

As [Chris Enns](https://twitter.com/ichris) mentioned, a lot has to do with a person's voice. All the equipment in the world, isn't going to make your voice sound "deeper than whale sh@#", as they say in radio.

**Microphone:**

Most radio stations use either an [Electro-Voice RE20](http://amzn.to/2rz7KOX) or a [Shure SM7B](http://amzn.to/2qJCQEo), both are on a mic boom, and have some sort of foam/pop-filter. (note: the RE20, has a built in pop filter).

I use a [Behringer B-1](http://amzn.to/2rNcRMu), which is a fantastic cardioid mic for the price [compared](https://gregrickaby.com/2013/05/microphone-shootout-behringer-b-1-vs-neumann-tlm-103/) to a [TLM-103](http://amzn.to/2smjYID). Both are used in production studio environments. (Production = non-live, where we cut commercials and stuff)

_Note: The RE20 is basically everywhere. It's THE microphone. Watch any radio show on TV, such as: Mike & Mike, The Herd, The Dan Patrick Show, and they're all use RE20's._

**Microphone Preamp:**

You will probably find an [Symetrix 528e](http://amzn.to/2qK4pgI) (or in a pinch a [DBX 286s](http://amzn.to/2rMNsSZ)) in most studios.

In addition to "massaging" your voice with EQ and a De-esser in real-time? These boxes also have a noise gate, which will help eliminate background noise, and a compressor, which will keep your voice the same volume - even if you yell.

**Audio Interface:**

There's probably not a USB input anywhere in sight (except maybe on the computer that records phone calls). You're going to need to drop some serious cash on a [Broadcast Console](http://broadcast.bswusa.com/search?p=Q&lbc=bsw&uid=158373672&ts=custom&w=*&method=and&view=grid&af=cat3%3abroadcast_broadcastconsoles_consoles%20cat2%3abroadcast_broadcastconsoles%20cat1%3abroadcast%20type%3aproducts) (insider speak, for a professional multi-channel mixer), which can cost thousands of dollars.

For podcasting, you could use a 12-channel [Behringer Xenyx X1204 USB](http://amzn.to/2rznd1E) or a [Mackie PROFX12V2](http://amzn.to/2rNfrlJ) mixer.

**Recording Software:**

Industry standard is [Adobe Audition](https://www.adobe.com/products/audition.html), formerly named (and still referred to as) "Cool Edit". This software has been around since the 90's.

**Your Room/Studio:**

Carpet and [audio foam](http://amzn.to/2rNx5FH) will clean things up so much!

You hit the nail on the head when you mentioned closing the doors, windows, turning off Slack/Notifications, and asking family to turn off the TV. Quiet rooms are your friend!

You will also need two, 6-foot [XLR cables](http://amzn.to/2rzx33y). (One cable goes from mic --> preamp, the other cable is for the preamp --> USB mixer)

**Audio Processing:**

This is radio's "secret weapon". How does radio DJ sound amazing? It's because their voice is going through a $14,000 [audio processor](http://broadcast.bswusa.com/nav/brand/orban%20labs%20inc/0) _before_ being transmitted to your radio.

These boxes do it all: multi-band compression, multi-band EQ, and limiting. Basically, they turn all audio sources (DJ vocals, music, commercials, etc...), into very loud (but clean) audio. The next time you listen to an FM radio station, take note on how the volume is consistent from song-to-song.

These audio processors are where the term "audio wars" came from...as FM radio stations back in the 80's competed to sound the loudest on the dial, without sounding distorted. The louder a radio station was, the more likely you were to stay tuned in (its true, even today).

**Wrap Up:**

You don't need to spend thousands to sound amazing. A decent audio chain (quiet room + microphone + preamp + USB input), will take you well on your way to sounding like a radio DJ.

BTW: You should also [read my review](/blog/microphone-shootout-behringer-b-1-vs-neumann-tlm-103/) of the Behringer B-1 vs Neumann TLM-103 microphones...it's fascinating, because it really comes down to the equipment surrounding the audio chain.

I hope this helps! Feel free to [ping me](https://twitter.com/gregrickaby) if you have questions.

(yes, some of these are affiliate links)
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/modify-wordpress-custom-post-type</guid>
              <title>Modify a Custom Post Type after it's been registered</title>
              <description></description>
              <link>https://gregrickaby.com/posts/modify-wordpress-custom-post-type</link>
              <pubDate>2016-06-09T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
Today I was tasked with adding functionality to an existing custom post type. The problem was, the CPT was being registered in a plugin which I could not edit.

After some digging, I found there's a filter for that (found in [post.php](https://core.trac.wordpress.org/browser/tags/4.5.2/src/wp-includes/post.php#L1017)) which allows you to modify a custom post type, after it's been registered some other way.

```php
apply_filters( 'register_post_type_args', $args, $post_type );
```

Hooking into that filter, allowed me to pass additional options to an existing CPT:

```php
<?php
/**
 * Filter the Products CPT to register more options.
 *
 * @param $args       array    The original CPT args.
 * @param $post_type  string   The CPT slug.
 *
 * @return array
 */
function grd_client_filter_products_cpt( $args, $post_type ) {
	// If not Products CPT, bail.
	if ( 'products' !== $post_type ) {
		return $args;
	}
	// Add additional Products CPT options.
	$products_args = array(
		'has_archive' => true,
		'supports'    => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'custom-fields', 'page-attributes' ),
	);
	// Merge args together.
	return array_merge( $args, $product_args );
}
add_filter( 'register_post_type_args', 'grd_client_filter_products_cpt', 10, 2 );
```

Now "Products" has an archive, along with some other meta boxes in the post editor. Nice!
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/get-wordpress-category-id</guid>
              <title>Get a WordPress Category ID</title>
              <description></description>
              <link>https://gregrickaby.com/posts/get-wordpress-category-id</link>
              <pubDate>2016-04-12T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
I rode the struggle bus pretty hard on this one today. I needed to ignore the "featured" category in a loop, and to do so, `WP_Query()` requires the category ID. Luckily, I found a handy function: [get_term_by();](http://codex.wordpress.org/Function_Reference/get_term_by)

```php
<?php
// Get the "featured" category object.
$featured_category = get_term_by( 'slug', 'featured', 'category' );

// Set the "featured" category ID.
$featured_category_ID = $featured_category->term_id;

// Get the latest three posts, ignoring the current post
// and any in the "featured" category.
$args = array(
	'post_type'              => 'post',
	'posts_per_page'         => 3,
	'post__not_in'           => array( get_the_ID() ),
	'category__not_in'       => array( $featured_category_ID ),
	'no_found_rows'          => true,
	'update_post_meta_cache' => false,
	'update_post_term_cache' => false,
);

// Run query.
$data = new WP_Query( $args );
```
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/set-up-localhost-on-virtualbox</guid>
              <title>Set up localhost on VirtualBox</title>
              <description></description>
              <link>https://gregrickaby.com/posts/set-up-localhost-on-virtualbox</link>
              <pubDate>2014-11-25T06:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
My local stack includes [MAMP](http://www.mamp.info/en/mamp-pro/), [VirtualBox](https://www.virtualbox.org/) and [ModernIE](https://www.modern.ie/). ModernIE is great for cross-browser testing, but you have configure your "hosts" file. Here are the steps to get localhost working through VirtualBox:

1. Click on `settings -> network`
2. Select `bridged adapter` from the dropdown

[![Screenshot 2014-11-25 08.37.00](/blog/images/Screenshot-2014-11-25-08.37.00.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-11-25-08.37.00.png)

3. Boot up your virtual machine
4. Navigate to `C:\Windows\System32\drivers\etc`
5. Change permissions. Right click, `Properties -> Security -> Advanced.` Select `Users` ->`Change Permissions`. Click `Full Control -> Ok`.

[![Screenshot 2014-11-25 09.22.23](/blog/images/Screenshot-2014-11-25-09.22.23.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-11-25-09.22.23.png) 6) Finally, open `hosts` with Notepad

[![Screenshot 2014-11-25 08.39.42](/blog/images/Screenshot-2014-11-25-08.39.42.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-11-25-08.39.42.png)

7. Enter the IP address of your localhost and the URL

[![Screenshot 2014-11-25 08.40.58](/blog/images/Screenshot-2014-11-25-08.40.58.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-11-25-08.40.58.png)

8. Save changes
9. Open a web browser and type in your address. Your localhost should now resolve.

[![Screenshot 2014-11-25 08.43.36](/blog/images/Screenshot-2014-11-25-08.43.36.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-11-25-08.43.36.png)

## Ubuntu

For testing on Ubuntu (via VirtualBox), you will need to bridge the network adapter and edit your host file as well. It's much easier than on Windows!

1. After bridging the network adapter (like above) open Terminal, and type:

```
$ sudo nano /etc/hosts
```

[![Screenshot 2014-12-02 13.07.30](/blog/images/Screenshot-2014-12-02-13.07.30.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-12-02-13.07.30.png)

2) Enter the IP address of your localhost and the URL

[![Screenshot 2014-12-02 13.11.12](/blog/images/Screenshot-2014-12-02-13.11.12.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-12-02-13.11.12.png)

3. Save the changes ( CTRL + X + Y ) and exit

[![Screenshot 2014-12-02 13.15.14](/blog/images/Screenshot-2014-12-02-13.15.14.png)](https://gregrickaby.com/wp-content/uploads/2014/11/Screenshot-2014-12-02-13.15.14.png)

That's it!

_\*\*Note: If your localhost is setup for DHCP, you'll probably need to update the hosts file with your new IP on a regular basis._
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/gregs-homemade-pizza-recipe</guid>
              <title>Greg's Homemade Pizza Recipe</title>
              <description></description>
              <link>https://gregrickaby.com/posts/gregs-homemade-pizza-recipe</link>
              <pubDate>2014-01-17T06:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
I love making homemade pizza. It's been a "Sunday staple" at our house for quite some time. Over the years, I've created a sort of Sicilian and Neapolitan style hybrid. This happened by accident when trying to copycat a Mellow Mushroom recipe. Personally, I love the chewiness of a Neapolitan, and the flavor of a Sicilian - and this dough brings the two together wonderfully. Yields two 12-14 inch pizzas.

## Table of Contents

- **Day 1**
  - [Activate Yeast](#yeast)
  - [Pizza Sauce](#sauce)
  - [Pizza Dough](#dough)
    - [Make](#make)
    - [Rise](#rise)
- **Day 2**
  - [Bake](#bake)
    - [Prep](#prep)
    - [Cook](#cook)
- [FAQs](#faq)
- [Further Reading](#further-reading)

## Day 1: Activate Yeast

- 1 1/2 cup (355 g) of Spring Water
- 1 tsp (4 g) of Sugar
- 2 tsp (6 g) of Active Dry Yeast (Instant works too)

### **Directions**

OK, the photos show Instant Yeast. And it works, but you're not really supposed to hydrate Instant Yeast (that's why it's "instant"). I recommend using Active Dry Yeast instead...

[![In the microwave, warm the water to 110˚F (43˚C).](/blog/images/2014-02-09-09.38.39-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.38.39.jpg)

In the microwave, warm the water to 110˚F (43˚C).

[![Add both the sugar and yeast.](/blog/images/2014-02-09-09.39.08-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.39.08.jpg)

Add both the sugar and yeast.

[![Making sure both are well combined.](/blog/images/2014-02-09-09.40.18-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.40.18.jpg)

Making sure both are well combined.

[![Let the yeast mixture sit 5-10 minutes until it blooms 1/2 - 1 inch.](/blog/images/2014-02-09-10.06.45-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.06.45.jpg)

Let the yeast mixture sit 5-10 minutes until it blooms 1/2 - 1 inch.

[![The head should be frothy!](/blog/images/2014-02-09-10.06.51-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.06.51.jpg)

The head should be frothy!

## Pizza Sauce

A large batch of Pizza Sauce is really easy to make! You can knock it out while the Yeast is activating and throw it in the freezer. Also, don't simmer the pizza sauce on a stove like Grandma used too, that's actually wrong!

Canned tomatoes are cooked while being canned AND you're going to cook the sauce on a pizza, in a 550F oven. So, do your sauce a favor and don't cook it _third time_ on the stove top. (Sorry Granny!)

Making the sauce on Day 1, will ensure all the ingredients have a chance to combine and mingle, resulting in maximum flavor.

- 20oz can of Crushed Tomatoes
- 4oz can of Tomato Paste
- 2 teaspoons Sugar
- 2 teaspoons Sea Salt
- 3/4 teaspoon Black Pepper
- 1/8 teaspoon Red Pepper
- 1/2 teaspoons Garlic Powder
- 1 teaspoon Basil
- 2 teaspoons Oregano

### Directions

Step 1: Combine ingredients in a large bowl.

Step 2: Stir until well combined.

Step 3: Put about 4oz of sauce on your pizza.

Storage: Store leftover sauce in small Tupperware containers. Place them in the freezer.

On your next pizza night, take a Tupperware container out of the freezer a several hours before dinner, and let it thaw to room temperature. **Never put cold pizza sauce on a pizza!**

## Pizza Dough

- 4 cups (560 g) of Bread or 00 flour
- 1 1/2 tsp (7 g) Kosher or Sea Salt
- 1 tsp (5 g) Basil and Oregano (optional)

### Make the pizza dough

[![The Bread flour is from Sam's Club. 25 lbs for only $7.00!](/blog/images/2014-02-09-09.48.19-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.48.19.jpg)

Place 560 grams of bread flour in a large mixing bowl. BTW: the Bread flour picture is from Sam's Club and it's only $7 for a 25 lbs bag.

[![7 grams of kosher salt.](/blog/images/2014-02-09-09.50.53-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.50.53.jpg)

7 grams of kosher salt.

[![Pizza Topper = basil, oregano, onion, garlic, and parsley.](/blog/images/2014-02-09-09.52.18-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.52.18.jpg)

Pizza Topper = basil, oregano, onion, garlic, and parsley.

[![Combine the ingredients in a large mixing bowl.](/blog/images/2014-02-09-09.53.20-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.53.20.jpg)

Combine the ingredients in a large mixing bowl.

[![Stir until salt and optional spices have mixed.](/blog/images/2014-02-09-09.56.32-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.56.32.jpg)

Stir until salt and optional spices have mixed.

[![Leaving a small hole to pour the yeast mixture.](/blog/images/2014-02-09-09.56.46-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-09.56.46.jpg)

Leaving a small hole to pour the yeast mixture.

[![Once the yeast mixture has bloomed, add to flour.](/blog/images/2014-02-09-10.07.09-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.07.09.jpg)

Once the yeast mixture has bloomed, add to flour.

[![Stir using the paddle attachment for 30 seconds. Stop. Allow 5 minutes for the flour to hydrate.](/blog/images/2014-02-09-10.07.29-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.07.29.jpg)

Stir using the paddle attachment for 30 seconds. Stop. Allow 5 minutes for the flour to hydrate.

[![After you let the flour hydrate for 5 minutes, switch to the dough hook attachment and knead at medium-low for 5 minutes.](/blog/images/2014-02-09-10.13.15-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.13.15.jpg)

After you let the flour hydrate for 5 minutes, switch to the dough hook attachment.

[![Knead at medium-low for 5 minutes.](/blog/images/2014-02-09-10.13.50-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.13.50.jpg)

Knead at medium-low for 5 minutes.

[![The dough should start pulling away from the bowl.](/blog/images/2014-02-09-10.14.24-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.14.24.jpg)

The dough should start pulling away from the bowl.

[![For the final 20 seconds, knead at medium-high speed to help organize the gluten.](/blog/images/2014-02-09-10.15.37-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.15.37.jpg)

For the final 20 seconds, knead at medium-high speed to help organize the gluten.

[![When finished, the dough should be a semi-firm and slightly sticky.](/blog/images/2014-02-09-10.16.45-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.16.45.jpg)

When finished, the dough should be a semi-firm and slightly sticky.

[![Scrape the dough from the dough hook.](/blog/images/2014-02-09-10.17.34-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.17.34.jpg)

Scrape the dough from the dough hook.

[![Now you'll need some flour, a bowl scraper and a hard surface.](/blog/images/2014-02-09-10.19.23-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.19.23.jpg)

Now you'll need some flour, a bowl scraper and a hard surface.

[![Sprinkle some flour on your work surface.](/blog/images/2014-02-09-10.20.11-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.11.jpg)

Sprinkle some flour on your work surface.

[![Using the bowl scraper, work the dough out of the bowl.](/blog/images/2014-02-09-10.19.40-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.19.40.jpg)

Using the bowl scraper, work the dough out of the bowl.

[![It should basically roll right out without much effort.](/blog/images/2014-02-09-10.19.49-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.19.49.jpg)

It should basically roll right out without much effort.

[![Using your palms, begin kneading the dough.](/blog/images/2014-02-09-10.20.17-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.17.jpg)

Using your palms, begin kneading the dough.

[![You only need to do this for about 60 seconds.](/blog/images/2014-02-09-10.20.22-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.22.jpg)

You only need to do this for about 60 seconds.

[![One last squish...](/blog/images/2014-02-09-10.20.23-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.23.jpg)

One last squish...

[![Now, start "cupping" the dough to begin forming a ball.](/blog/images/2014-02-09-10.20.30-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.30.jpg)

Now, start "cupping" the dough to begin forming a ball.

[![Cupping and spinning the dough until it forms a ball.](/blog/images/2014-02-09-10.20.33-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.33.jpg)

Cupping and spinning the dough until it forms a ball.

[![It takes a little practice!](/blog/images/2014-02-09-10.20.38-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.38.jpg)

It takes a little practice!

[![When you dough has been formed into a ball, sprinkle a little flour on top.](/blog/images/2014-02-09-10.20.48-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.20.48.jpg)

When you dough has been formed into a ball, sprinkle a little flour on top.

[![Nicely done.](/blog/images/2014-02-09-10.21.36-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.21.36.jpg)

Nicely done.

### Let it rise

[![Add some olive oil to a large bowl.](/blog/images/2014-02-09-10.22.36-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.22.36.jpg)

Add some olive oil to a large bowl.

[![Place the dough inside the bowl, and cover with plastic wrap.](/blog/images/2014-02-09-10.23.46-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.23.46.jpg)

Place the dough inside the bowl, and cover with plastic wrap.

[![Place the bowl in the refrigerator, and let the dough rise overnight. It will keep for 4 days or you can freeze it).](/blog/images/2014-02-09-10.25.26-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-10.25.26.jpg)

Place the bowl in the refrigerator, and let the dough rise overnight. It will keep for 4 days or you can freeze it).

## Day 2: Baking Day

[![Take the pizza dough out of the refrigerator at least 3 hours before you plan to bake. Just leave it in it's bowl, covered, and let it warm up on your countertop.](/blog/images/2014-02-09-16.54.22-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-16.54.22.jpg)

Take the pizza dough out of the refrigerator at least 3 hours before you plan to bake. Just leave it in it's bowl, covered, and let it warm up on your countertop.

## Pizza Dough Prep

_This is where it will differ from household to household. I've spent entirely too much money on pizza baking kitchen goodies, like a high quality pizza stone, pans, peel, a roul'pat, etc. This is my hobby, and worth the extra expense. I will provide basic instructions. Please feel free to make-it-your-own at this point and have fun!_

[![Pre-heat your oven as high as it goes. (Mine goes to 550˚F, professional pizza ovens and wood fire grills are 1,000˚F). Crank it up! If you have a pizza stone, place it on the top rack of your oven. If you don't, go buy one.](/blog/images/2014-02-09-16.54.49-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-16.54.49.jpg)

Preheat your oven as high as it goes. (Mine goes to 550˚F, professional pizza ovens and wood fire grills are 1,000˚F). Crank it up! If you have a pizza stone, place it on the top rack of your oven. If you don't own a pizza stone, go buy one, I'll wait.

[![Remove the pizza dough from the bowl and place on a floured surface.](/blog/images/2014-02-09-16.58.21-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-16.58.21.jpg)

Remove the pizza dough from the bowl and place on a floured surface.

[![Cover the dough with a little flour and cornmeal and form into a ball. Cut in half.](/blog/images/2014-02-09-17.06.07-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.06.07.jpg)

Cover the dough with a little flour and semolina flour (or cornmeal) and form into a ball. Cut in half.

[![Each half should weigh about 1lb.](/blog/images/2014-02-09-17.06.52-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.06.52.jpg)

Each half should weigh about 1lb.

[![Sprinkle some cornmeal and flour on the surface.](/blog/images/2014-02-09-17.07.47-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.07.47.jpg)

Sprinkle some cornmeal and flour on the surface.

[![Cover both sides of the dough with the cornmeal and flour.](/blog/images/2014-02-09-17.08.09-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.08.09.jpg)

Cover both sides of the dough with the cornmeal and flour.

[![Using your fingertips, create an edge. This will be your crust.](/blog/images/2014-02-09-17.09.22-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.09.22.jpg)

Using your fingertips, create an edge. This will be your crust.

[![Using the push method, press the dough from the outside working in a circle. Toss the dough just about your head until it's big enough to cover a pizza peel or pan.](/blog/images/2014-02-09-17.15.22-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.15.22.jpg)

Using the push method, press the dough from the outside working in a circle. Toss the dough just about your head until it's big enough to cover a pizza peel or pan.

[![Sprinkle some more cornmeal and flour on the pizza peel.](/blog/images/2014-02-09-17.17.09-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.17.09.jpg)

Sprinkle some more cornmeal and flour on the pizza peel.

[![Using your hands, spread the cornmeal and flour until the peel is evenly covered.](/blog/images/2014-02-09-17.17.39-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.17.39.jpg)

Using your hands, spread the cornmeal and flour until the peel is evenly covered.

[![Place the dough on the peel. Melt some butter and add 1 tsp of garlic powder or garlic salt.](/blog/images/2014-02-09-17.19.37-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.19.37.jpg)

Place the dough on the peel. Melt some butter and add 1 tsp of garlic powder or garlic salt.

[![Spread the garlic butter on the outer edge of the crust.](/blog/images/2014-02-09-17.19.49-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.19.49.jpg)

Spread the garlic butter on the outer edge of the crust.

[![Pour the pizza sauce in the middle. Spread using a large spoon in a circular motion working outward toward the crust.](/blog/images/2014-02-09-17.22.38-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.22.38.jpg)

Pour the pizza sauce in the middle. Spread using a large spoon in a circular motion working outward toward the crust.

[![Add cheese. I prefer low-moisture 2% skim mozzarella. ](/blog/images/2014-02-09-17.23.22-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.23.22.jpg)

Add cheese. I prefer low-moisture 2% skim mozzarella.

[![Add your toppings. The faster you top the pizza, the less likely it is to stick to the peel.](/blog/images/2014-02-09-17.25.55-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.25.55.jpg)

Add your toppings. The faster you top the pizza, the less likely it is to stick to the peel. Pro-top: use a fork to pop any of the larger remaining air bubbles. Sure, they look at cute now, but they will cause GIANT bubbles in your pizza while baking.

### Cook That Pie!

[![Slide the pizza off the peel and onto the pizza stone.](/blog/images/2014-02-09-17.29.00-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.29.00.jpg)

Slide the pizza off the peel and onto the pizza stone.

[![Pull the peel back slowly. Let it cook for 10-12 minutes.](/blog/images/2014-02-09-17.29.05-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.29.05.jpg)

Pull the peel back slowly. Let it cook for 10-12 minutes.

[![When it's finished, pull the pizza out with the peel and spread another layer of garlic butter on the crust.](/blog/images/2014-02-09-17.40.24-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.40.24.jpg)

When it's finished, pull the pizza out with the peel and spread another layer of garlic butter on the crust.

[![Sprinkle some parmesan cheese on top.](/blog/images/2014-02-09-17.43.32-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.43.32.jpg)

Sprinkle some parmesan cheese on top.

[![The bottom should be firm, crisp, and slightly dusted with cornmeal.](/blog/images/2014-02-09-17.46.01-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.46.01.jpg)

The bottom should be firm, crisp, and slightly dusted with cornmeal.

[![Slice it up and enjoy!](/blog/images/2014-02-09-17.48.04-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2014-02-09-17.48.04.jpg)

Slice it up and enjoy!

[![Bubba's Bacon Bonanza.](/blog/images/2013-10-13-18.44.58-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2013-10-13-18.44.58.jpg)

Bubba's Bacon Bonanza.

[![Meat lovers.](/blog/images/2013-12-22-16.57.49-1280x720.jpg)](https://gregrickaby.com/wp-content/uploads/2014/01/2013-12-22-16.57.49.jpg)

Meat lovers.

## FAQ

**Q)** Why spring water?
**A)** Because tap water contains chlorine, which inhibits yeast. If you don't have any, it's OK...this time.

**Q)** Why bread or 00 flour?
**A)** Because pizza dough needs to be stretchable. The higher protein content in these flours makes the dough stronger and more playful. I recommend [Antimo Caputo 00 Pizzeria Flour](https://amzn.to/2WNqVnS).

**Q)** My dough won't rise!?
**A)** It's either because your yeast is dead, there is too much salt, or it has nothing to eat. Yes, you can kill yeast. Salt inhibits yeast. Sugar is yeast's favorite food. Give the yeast a treat, man!

**Q)** Why the rising overnight? I'm hungry now.
**A)** Yeast eats sugar and poops carbon dioxide/alcohol. Yeast droppings force the dough to rise and give it flavor. _The more time we give the yeast to eat and poop, the better your dough will taste._ If you can't wait, have one delivered!

**Q)** Why is the oven so hot?
**A)** High heat is how we achieve a crisp crust with a chewy center. Cooking slow at a low temperature would result in a soggy, limp pizza. Yuck!

**Q)** What pizza stone do you use?
**A)** [Emile Henry](https://amzn.to/2UFKLP1)

**Q)** What about your pizza peel?
A) [Norpro](https://amzn.to/2QQypT6)

Q) And that cool looking silicone mat?
A) [Roul'pat](https://amzn.to/1oxKpFB)

## Further Reading

Over the years I've read a lot of books, blog posts, and watched many YouTube videos trying to hone the craft. One of the most influential pizzaiolis is 13-time World Pizza Champion, [Chef Tony Gemignani](https://en.wikipedia.org/wiki/Tony_Gemignani). His book [_The Pizza Bible_](https://amzn.to/3dvvwRD) has inspired me more than most.

I would also highly recommend reading Peter Reinhart's, [_Artisan Breads Ever Day_](https://amzn.to/2UK9l1v) and Ken Forkish's [_Flour Water Salt Yeast_](https://amzn.to/2JkpMfr) to really gain a deep understanding into why these simple ingredients are so wonderful together, or as I call it "Bread Porn".

Good luck!
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/create-mu-plugin-for-wordpress</guid>
              <title>Create a 'Must Use' Plugin for WordPress</title>
              <description></description>
              <link>https://gregrickaby.com/posts/create-mu-plugin-for-wordpress</link>
              <pubDate>2013-10-10T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
Some of you are like me: "frequent theme changer guy". Here's a trick I've learned to keep from having to re-write code every time I get bored with a theme: I use the "Must Use" Plugin.

## What's an MU Plugin?

> A "Must Use" Plugin is a perfect solution for setting up Custom Post Types, Taxonomies, Google Analytics, and other important - but not necessarily "updatable" code, that would otherwise be lost upon a theme change.

The general consensus is: _CPT's & Taxonomies should not be handled at the theme level, but rather, at the plugin level._

An MU Plugin is code that cannot be deactivated or deleted unless you have sFTP access. Check out the history of [Must Use Plugins](http://codex.wordpress.org/Must_Use_Plugins) and learn more at the [WordPress Codex](http://codex.wordpress.org/Must_Use_Plugins)

## Why not create a normal plugin or use functions.php?

You could. But there are extra steps to get it activated if you're running a multi-site network. Furthermore, if others have access to the Plugins section of the WP Dashboard, there's a chance it could be deleted or deactivated by mistake. Worse, if you load up important things in `functions.php`, You'll lose everything if the theme changes.

By using an MU plugin, your code will always be "on", no matter what network, theme, or curious guest blogger might do otherwise!

## Ok, how do I create a "Must Use" Plugin?

1. You need to create a directory: `/wp-content/mu-plugins/`
2. Next, create a PHP file. You can name it anything you want. Mine is named `grd_functions.php`. The full path would look like:`/wp-content/mu-plugins/grd_functions.php`
3. Now add your code, save your file and upload

That's it! Really!

### How about an example?

Here is an example Must Use plugin:

```php
<?php
/*
Plugin Name: Must Use Functions
Plugin URI: https://gregrickaby.com
Description: This plugin contains important functionality that need to persist, even if the theme changes.
Version: 1.0.0
Author: Greg Rickaby
Author URI: https://gregrickaby.com
*/

namespace GRD;

/**
 * Place Google Analytics in the header.
 *
 * @author Greg
 * @version 1.0.0
 */
function google_analytics() {
?>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-1212017-87"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'UA-123456-78');
</script>
<?php
}
add_action( 'wp_head', 'GRD\google_analytics', 9999 );
```
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/genesis-code-snippets</guid>
              <title>Genesis Code Snippets</title>
              <description></description>
              <link>https://gregrickaby.com/posts/genesis-code-snippets</link>
              <pubDate>2013-05-19T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
Here is my collection of code snippets I use build child themes in [Genesis](https://gregslink.co/try-genesis).

If it's not here, please check out Bill Erickson's [Genesis Quick Tips](http://www.billerickson.net/genesis-quick-tips/), Gary's [Code](http://code.garyjones.co.uk/), or Brian Gardner's [Code](http://www.briangardner.com/code/). Thanks to [Gary J](http://twitter.com/garyj) for advice on cleaning up the code snippets to adhere with coding standards.

NOTE: While all of these functions still work, some may not with Genesis 2.0's new hook structure. Check out [this visual guide](http://genesistutorials.com/visual-hook-guide/) to make adjustments.

Quickly navigate to a section:

- [Header](#header)
- [Template](#template)
- [Body](#body)
- [Sidebars](#sidebars)
- [Footer](#footer)
- [Development](#development)

### Header

**Custom Header Support**

```php
/** Add custom header support */
add_theme_support( 'genesis-custom-header', array( 'width' => 960, 'height' => 100, 'textcolor' => '444', 'admin_header_callback' => 'minimum_admin_style' ) );
```

**Remove Header**

```php
/** Remove Header */
remove_action( 'genesis_header', 'genesis_do_header' );
```

**Remove Title & Description**

```php
/** Remove Title & Description */
remove_action( 'genesis_site_title', 'genesis_seo_site_title' );
remove_action( 'genesis_site_description', 'genesis_seo_site_description' );
```

**Build a Custom Title**

```php
remove_action( 'genesis_site_title', 'genesis_seo_site_title' );
add_action( 'genesis_site_title', 'child_seo_site_title' );

/**
 * Remove title, add <span> in-between Buzz.
 * Then add title back to header.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_seo_site_title() {

	echo '<h1 id="title"><span>Buzz</span>Montgomery.com</h1>';

}
```

**Move Navigation Menu**

```php
/** Move primary nav menu */
remove_action( 'genesis_after_header', 'genesis_do_nav' );
add_action( 'genesis_before_header', 'genesis_do_nav' );
```

**Move Secondary Navigation Menu**

```php
/** Move secondary nav menu */
remove_action( 'genesis_after_header', 'genesis_do_subnav' );
add_action( 'genesis_before_header', 'genesis_do_subnav' );
```

**Favicon To CDN**

```php
add_filter( 'genesis_pre_load_favicon', 'child_favicon_filter' );
/**
 * Change the location of the favicon reference.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_favicon_filter( $favicon_url ) {

	return 'http://cdn.yoursite.com/wp-content/themes/child/images/favicon.ico';

}
```

**Stylesheet To CDN**

```php
remove_action( 'genesis_meta', 'genesis_load_stylesheet' );
add_action( 'genesis_meta', 'child_stylesheet_cdn' );
/**
 * Change the location of the stylesheet reference.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_stylesheet_cdn() {

	echo '<link rel="stylesheet" href="http://cdn.yourdomain.com/wp-content/themes/child/style.css" type="text/css" media="screen" />'."\n";

}
```

**Move jQuery To Google CDN**

```php
add_action( 'wp_enqueue_scripts', 'script_managment', 99);
/**
 * Change the location of jQuery.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function script_managment() {
	  wp_deregister_script( 'jquery' );
	  wp_deregister_script( 'jquery-ui' );
	  wp_register_script( 'jquery', 'http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js' );
	  wp_register_script( 'jquery-ui', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js' );
	  wp_enqueue_script( 'jquery', 'http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js', array( 'jquery' ), '4.0', false );
	  wp_enqueue_script( 'jquery-ui', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js', array( 'jquery' ), '1.8.16' );
}
```

**Add viewport for responsive (mobile) design**

```php
/** Add Viewport meta tag for mobile browsers */
add_action( 'genesis_meta', 'child_viewport_meta_tag' );
function child_viewport_meta_tag() {
	echo '<meta name="viewport" content="width=device-width, initial-scale=1.0"/>';
}
```

### Template

**Place WP-Cycle (must have [WP-Cycle](http://wordpress.org/extend/plugins/wp-cycle/) plug-in installed first)**

```php
/** Place WP-Cycle */
add_action( 'genesis_before_loop', 'wp_cycle' );
```

**Image Sizes**

```php
/** Custom image sizes */
add_image_size( 'Slideshow', 520, 280, TRUE );
add_image_size( 'Small Thumbnail', 70, 70, TRUE );
```

**Post Thumbnails**

```php
/** Add support for post thumbnails */
set_post_thumbnail_size( 300, 165, TRUE );
```

**Post Formats**

```php
/** Add support for post formats */
add_theme_support( 'post-formats', array( 'aside', 'chat', 'gallery', 'image', 'link', 'quote', 'status', 'video', 'audio' ));

/** Add support for post format images */
add_theme_support( 'genesis-post-format-images' );
```

**Unregister Site Layouts**

```php
/** Unregister site layouts */
genesis_unregister_layout( 'sidebar-content' )
genesis_unregister_layout( 'full-width' )
genesis_unregister_layout( 'content-sidebar-sidebar' );
genesis_unregister_layout( 'sidebar-sidebar-content' );
genesis_unregister_layout( 'sidebar-content-sidebar' );
```

**Force Layout**

```php
add_filter( 'genesis_pre_get_option_site_layout', 'child_do_layout' );
/**
 * Force layout
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_do_layout( $opt ) {
    $opt = 'full-width-content'; // You can change this to any Genesis layout
    return $opt;
}
```

**Use the Genesis Custom Loop**

```php
remove_action( 'genesis_loop', 'genesis_do_loop' );
add_action( 'genesis_loop', 'custom_loop' );
/**
 * Remove default loop. Execute Custom Loop Instead.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function custom_loop() {
global $paged;

	 $args = ( array(
		'category_name'  => 'Blog',
		'order'          => 'asc',
		'order_by'       => 'title',
	 	'paged'          => $paged,
	 	'posts_per_page' => 5
	) );

genesis_custom_loop( $args );

}

genesis();
```

**Custom Page Template**

```php
<?php
/*
Template Name: Custom Page Template
*/

// Remove page title
remove_action( 'genesis_entry_header', 'genesis_do_post_title' );

// Force full width content (optional)
add_filter( 'genesis_pre_get_option_site_layout', '__genesis_return_full_width_content' );

// Remove default Genesis loop
remove_action( 'genesis_loop', 'genesis_do_loop' );

// Add new custom loop
add_action( 'genesis_loop', 'child_custom_loop' );


/**
 * Execute child loop
 */
function child_custom_loop() { ?>

<!-- custom code here -->

<?php }

genesis();
```

**Use the Genesis Grid Loop in `front-page.php`**

```php
remove_action( 'genesis_loop', 'genesis_do_loop' );
add_action( 'genesis_loop', 'child_grid_loop_helper' );
/** Add support for Genesis Grid Loop **/
function child_grid_loop_helper() {

	if ( function_exists( 'genesis_grid_loop' ) ) {
		remove_action( 'genesis_before_post_content', 'generate_post_image', 5 );
		genesis_grid_loop( array(
			'features'              => 2,
			'feature_image_size'    => 'large',
			'feature_image_class'   => 'aligncenter post-image',
			'feature_content_limit' => 0,
			'grid_image_size'       => 'grid',
			'grid_image_class'      => 'alignleft post-image',
			'grid_content_limit'    => 0,
			'more'                  => __( 'Continue reading...', 'genesis' ),
			'posts_per_page'        => 6,
		) );
	} else {
		genesis_standard_loop();
	}

}

genesis();
```

**Filter out duplicate posts in the WordPress Loop**

```php
$do_not_duplicate = array();
    query_posts( 'cat=featured&showposts=6' ); while ( have_posts() ) : the_post();
    $do_not_duplicate[] = $post->ID;
    <!-- do stuff -->
endwhile; wp_reset_query();
```

**Add Widgets And WP-Cycle To `front-page.php`**

```php
remove_action( 'genesis_after_post_content', 'genesis_post_meta', 10 );
remove_action( 'genesis_loop', 'genesis_do_loop' );
add_action( 'genesis_before_loop', 'wp_cycle' );
add_action( 'genesis_loop', 'child_home_loop_helper' );
/**
 * Add Widgets and WP-Cycle to home.php.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_home_loop_helper() { ?>

<div id="homepage_widgets">
	<div class="column1">
		<ul>
 			<?php if ( !function_exists( 'dynamic_sidebar' ) || !dynamic_sidebar( 'Home 1' ) ){ ?><?php } ?>
 		</ul>
	</div>
	<div class="column2">
		<ul>
 			<?php if ( !function_exists( 'dynamic_sidebar' ) || !dynamic_sidebar( 'Home 2' ) ){ ?><?php } ?>
 		</ul>
	</div>
</div>

<?php }

genesis();
```

### Body

**Remove Post Titles**

```php
/** Custom post titles */
remove_action( 'genesis_post_title','genesis_do_post_title' );
```

**Remove Post Titles Using Conditional Tags**

```php
remove_action( 'genesis_post_title','genesis_do_post_title' );
add_action( 'genesis_post_title','child_post_title' );
/**
 * Remove Post Title with conditional tag.
 *
 */
function child_post_title() {

if ( is_front_page() ) {
	remove_action( 'genesis_post_title','genesis_do_post_title' );

}}
```

See the [WordPress Codex](http://codex.wordpress.org/Conditional_Tags) for more conditional tags.

**Remove Edit Link**

```php
/** Remove Edit Link */
add_filter( 'edit_post_link', '__return_false' );
```

**Remove default Post Image**

```php
/** Remove default post image */
remove_action( 'genesis_post_content', 'genesis_do_post_image' );
```

**Add Post Image above Title**

```php
/** Add custom post image above post title */
add_action( 'genesis_before_post_content', 'generate_post_image', 5 );
function generate_post_image() {

	if ( is_page() || ! genesis_get_option( 'content_archive_thumbnail' ) )
		return;

	if ( $image = genesis_get_image( array( 'format' => 'url', 'size' => genesis_get_option( 'image_size' ) ) ) ) {
		printf( '<a href="%s" rel="bookmark"><img class="post-image" src="%s" alt="%s" /></a>', get_permalink(), $image, the_title_attribute( 'echo=0' ) );
	}

}
```

**Custom Post Info (with Shortcodes)**

```php
add_filter( 'genesis_post_info', 'child_post_info_filter' );
/**
 * Custom Post Info with shortcodes.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_post_info_filter( $post_info ) {
	return '[post_date] by [post_author_posts_link] at [post_time] [post_comments] [post_edit]';
}
```

**Remove Post Info (Author and Date information)**

```php
/** Remove post info */
remove_action( 'genesis_before_post_content', 'genesis_post_info' );
```

**Remove Post Meta**

```php
/** Remove the post meta function */
remove_action( 'genesis_after_post_content', 'genesis_post_meta' );
```

**Custom Post Meta (With Shortcodes)**

```php
add_filter( 'genesis_post_meta', 'child_post_meta_filter' );
/**
 * Custom Post Meta with shortcodes.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_post_meta_filter( $post_meta ) {
	return '[post_categories] Tagged with [post_tags]';
}
```

**Read More Link**

```php
add_filter( 'excerpt_more', 'child_read_more_link' );
add_filter( 'get_the_content_more_link', 'child_read_more_link' );
add_filter( 'the_content_more_link', 'child_read_more_link' );
/**
 * Custom Read More link.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_read_more_link() {
	return '<a class="more-link" href="' . get_permalink() . '" rel="nofollow">Continue Reading...</a>';
}
```

**Change Avatar Size**

```php
add_filter( 'genesis_comment_list_args', 'child_comment_list_args' );
/**
 * Change Avatar size.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_comment_list_args( $args ) {
	return array( 'type' => 'comment', 'avatar_size' => 42, 'callback' => 'genesis_comment_callback' );
}
```

### Sidebars

**Remove Default Sidebar**

```php
/** Remove default sidebar */
remove_action( 'genesis_sidebar', 'genesis_do_sidebar' );
```

**Remove Secondary Sidebars**

```php
/** Remove secondary sidebar */
unregister_sidebar( 'header-right' );
unregister_sidebar( 'sidebar' );
unregister_sidebar( 'sidebar-alt' );
```

**Add Custom Sidebar**

```php
/** Add custom sidebar */
genesis_register_sidebar(array(
	'name'=>'Alternative Sidebar',
	'id' => 'sidebar-alternative',
	'description' => 'This is an alternative sidebar',
	'before_widget' => '<div id="%1$s"><div class="widget %2$s">',
	'after_widget'  => "</div></div>\n",
	'before_title'  => '<h4><span>',
	'after_title'   => "</span></h4>\n"
));
```

**Add Widgets**

```php
add_action( 'genesis_sidebar', 'child_do_sidebar' );
/**
 * Add a widget/sidebar area.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_do_sidebar() {
	if ( !function_exists( 'dynamic_sidebar' ) || !dynamic_sidebar( 'Sidebar Name' ) ) {
}}
```

### Footer

**Custom Footer and Footer Nav (with Shortcodes)**

```php
add_filter( 'genesis_footer_output', 'child_output_filter', 10, 3 );
/**
 * Custom Footer with shortcodes.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_output_filter( $backtotop_text, $creds_text ) {

	$backtotop_text = '[footer_backtotop text="Top of Page"]';
	$creds_text = wp_nav_menu( array( 'menu' => 'Footer Nav' ));
	return '<div>' . $backtotop_text . '</div>' . '<div>' . $creds_text . '</div>';

}
```

**Remove Footer Widgets (Genesis 1.6+)**

```php
/** Remove footer widgets */
remove_theme_support( 'genesis-footer-widgets', 3 );
```

**Remove Footer**

```php
/** Remove Footer */
remove_action( 'genesis_footer', 'genesis_do_footer' );
```

**Create a Custom Footer with HTML**

```php
remove_action( 'genesis_footer', 'genesis_do_footer' );
add_action( 'genesis_footer', 'child_footer_html' );
/**
 * Custom Footer with HTML.
 *
 * @author Greg Rickaby
 * @since 1.0.0
 */
function child_footer_html() { ?>

	<div class="banner alignleft">
		<!-- openx text/code here -->
	</div>
	<div class="creds">
		<!-- credit text/code here -->
	<div>

<?php }
```

### Development

**Get settings from database**

```php
genesis_get_option( 'option_name', $this->settings_field )
```

**Get settings from database for custom metaboxes**

```php
genesis_get_custom_field( 'meta_box_option_name' )
```

**Cache Bust your CSS**

```php
add_filter( 'stylesheet_uri', 'child_stylesheet_uri' );
/**
 * Cache bust the style.css reference.
 *
 */
function child_stylesheet_uri( $stylesheet_uri ) {
    return add_query_arg( 'v', filemtime( get_stylesheet_directory() . '/style.css' ), $stylesheet_uri );
}
```
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/how-to-install-lamp-on-ubuntu</guid>
              <title>How To: Install LAMP on Ubuntu</title>
              <description></description>
              <link>https://gregrickaby.com/posts/how-to-install-lamp-on-ubuntu</link>
              <pubDate>2013-05-19T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
My brother called to talk about moving his company's web development and testing environment in-house. They had already downloaded Ubuntu, but didn't know how to get Apache, MySQL, or PHP installed. I sent him one command and 5 minutes later, they had a fully functional LAMP stack running.

Below is a laundry list of commands to help you configure the perfect Ubuntu server.

Last Update: 12/16/2019 - local copy and user permission updates

### First things first: update

```
$ sudo apt-get update && sudo apt-get upgrade
```

### LAMP Stack (Apache, Mysql, PHP)

This will install the LAMP stack in one command. (Note: this will not include the latest versions of things, but is the easiest way. See below to obtain bleeding edge things)

```
$ sudo apt-get install lamp-server^
```

### PHP 7.1

```
$ sudo apt-get install python-software-properties
$ sudo add-apt-repository ppa:ondrej/php
$ sudo apt-get update
$ sudo apt-get install -y php7.1
```

[http://askubuntu.com/questions/705880/how-to-install-php-7](http://askubuntu.com/questions/705880/how-to-install-php-7)

### Apache 2.4+

```
$ sudo add-apt-repository ppa:ondrej/apache2
$ sudo apt-get update
$ sudo apt-get install apache2
```

### MySQL 5.7+

```
$ sudo add-apt-repository -y ppa:ondrej/mysql-5.7
$ sudo apt-get update
$ sudo apt-get install mysql-server-5.7
```

### NGINX

[NGINX](http://nginx.org/) is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server.

```
$ sudo apt-get install nginx
```

NGINX doesn't start on its own, so:

```
$ sudo service nginx start
```

Learn about [configuring NGINX as a front-end proxy](https://www.digitalocean.com/community/articles/how-to-configure-nginx-as-a-front-end-proxy-for-apache) with Apache

### phpMyAdmin

[phpMyAdmin](http://www.phpmyadmin.net/home_page/index.php) allows you to manage your MySQL Database via web browser.

```
$ sudo apt-get install phpmyadmin
```

Choose Apache and then YES for dbconfig-common. If you ever need to edit phpMyAdmin config:

```
$ sudo nano /etc/dbconfig-common/phpmyadmin.conf
```

### Webmin

[Webmin](http://www.webmin.com/) is an open-source server management tool much like cPanel.

```
$ sudo nano /etc/apt/sources.list
```

Scroll to the bottom and paste the following lines then save:

```
$ deb http://download.webmin.com/download/repository sarge contrib
$ deb http://webmin.mirror.somersettechsolutions.co.uk/repository sarge contrib
```

Import the key

```
$ wget http://www.webmin.com/jcameron-key.asc
$ sudo apt-key add jcameron-key.asc
```

Update the sources list

```
$ sudo apt-get update
```

Run the install

```
$ sudo apt-get install webmin
```

Start Webmin

```
$ sudo /etc/webmin/start
```

When it's finished, open Firefox or Chrome and type:

```
http://localhost:10000/ (or if on a network) http://your-server-ip:10000/
```

If you've installed a fresh copy of Ubuntu (or if you don't know your password) you can set a new one:

```
$ sudo passwd ubuntu
```

You'll be prompted to enter your new password twice. Now, you can login to Webmin.

### ProFTPd

[ProFTPd](http://www.proftpd.org/) is a high-performance FTP server.

```
sudo apt-get install proftpd
```

(I always select "standalone") _Turn on Passive FTP via Webmin:_ `Servers --> ProFTPD server --> Virtual Servers --> Default Server -->` Networking Options

```
Masquerade as address = your-server-outside-ip
```

```
PASV Port Range: 1024-1088
```

### Sendmail

```
sudo apt-get install sendmail
```

### PostFix Mail

```
sudo apt-get install postfix
```

Select "Internet Site" and then enter the domain name you want the Reverse DNS entry to be. _BTW: To avoid your server being blacklisted, get a reverse DNS entry!_

### Alternative PHP Cache (APC)

[APC](http://us1.php.net/apc/) is a PHP opcode cacher and works by caching PHP objects, functions, and database queries into your server's RAM. If you run a WordPress website - then it takes full advantage of APC out-of-the-box. See my post on [The Perfect APC Configuration](https://gregrickaby.com/the-perfect-apc-configuration/ 'The Perfect APC Configuration') Note, APC [is no longer available](https://gregrickaby.com/wordpress-with-apache-2-4-and-php-5-5/) in PHP 5.5+ as it's now called [OPCACHE](http://us2.php.net/opcache).

```
$ sudo apt-get install php-apc
```

By default, Ubuntu will install this from a repository which has an outdated version. To install the latest version of APC:

```
$ sudo apt-get install make
```

```
$ sudo apt-get install libpcre3-dev
```

```
$ sudo apt-get install php-pear
```

```
$ sudo pecl install apc
```

```
$ sudo /etc/init.d/apache2 restart
```

Uninstall APC

```
$ sudo pecl uninstall apc
```

### Memcached

[Memcached](http://memcached.org/) is a high-performance, distributed memory object caching system. However, it can work together with multiple servers (unlike APC).

```
$ sudo apt-get install memcached
$ sudo apt-get install php-pear
$ sudo pecl install memcache
```

Check to see if Memcached is running

```
$ ps aux | grep memcached
```

### Fail2Ban

[Fail2Ban](http://www.fail2ban.org/) scans log files (e.g. /var/log/apache/error_log) and automatically bans IPs that show malicious signs for exploits.

```
$ sudo apt-get install fail2ban
```

### RSYNC

[RSYNC](http://rsync.samba.org/) is a open source utility that provides fast incremental file transfer.

```
$ sudo apt-get install rsync
```

Server-to-server transfers with RSYNC

```
$ rsync -zvr /path/to/local/folder user@server.com:path/to/remove/folder
```

### ImageMagick

[ImageMagick](http://www.imagemagick.org/) is a software suite to create, edit, compose, or convert bitmap images.

```
$ sudo apt-get install imagemagick
```

### Image Optimization

First install both [jpegoptim](https://github.com/tjko/jpegoptim) and [optipng](http://optipng.sourceforge.net/).

```
$ sudo apt-get install jpegoptim optipng
```

CD into a directory that has images and type:

```
$ jpegoptim *.jpg -p -v -t -T 10
```

Optimize PNGs

```
$ optipng *.png
```

### Icecast2

[Icecast](http://www.icecast.org/) is a streaming audio server. If you ever wanted to have your own web radio station (like Shoutcast) this is the software.

```
$ sudo apt-get install icecast2
```

Configure Icecast2. Mainly, setting up your passwords and default port.

```
$ sudo nano /etc/icecast2/icecast.xml
```

Enable init.d script. Scroll to the bottom and change enable=true

```
$ sudo nano /etc/default/icecast2/
```

Start icecast2

```
$ sudo /etc/init.d/icecast2 start
```

If you left the default port as 8000 then you can view your Icecast2 Server

```
http://your-server.com:8000/
```

### Munin

[Munin](http://munin-monitoring.org/) is a networked resource monitoring tool that can help analyze resource trends and "what just happened to kill our performance?" problems.

```
$ sudo apt-get install php-cli
```

Now, this is a single server setup, so let's install munin and munin-node

```
$ sudo apt-get install munin munin-node
```

Configure Munin:

```
$ sudo nano /etc/munin/munin.conf
```

The first thing you should see is the operating directories. We need to change one of them:

```
# dbdir   /var/lib/munin
# htmldir /var/cache/munin/www
# logdir /var/log/munin
# rundir  /var/run/munin
```

to

```
# dbdir   /var/lib/munin
htmldir /var/www/munin
# logdir /var/log/munin
# rundir  /var/run/munin
```

Now let's edit apache.conf

```
$ sudo nano /etc/munin/apache.conf
```

Delete everything inside apache.conf  and just add:

```
Alias /munin /var/www/munin
```

Move the web files to /var/www/munin

```
$ sudo mv /var/cache/munin/www/ /var/www/munin
```

Set permissions

```
$ sudo chown munin.munin -R /var/www/munin
```

Restart Munin

```
$ sudo /etc/init.d/munin-node restart
```

Finally, restart Apache

```
$ sudo /etc/init.d/apache2 restart
```

[http://your-server.com/munin](http://your-server.com/munin)

### Cacti

[Cacti](http://www.cacti.net/) graphical server monitor provides a fast poller, advanced graph templating, multiple data acquisition methods, and user management features out of the box.

```
$ sudo apt-get install cacti-spine
```

Choose YES for `dbconfig-common` and Apache2. When finished you need to configure:

```
http://your-server-ip-address/cacti
```

Default user & pass: admin / admin Remove cacti

```
$ sudo apt-get remove cacti
```

### BMON

[bmon](http://www.carisma.slowglass.com/~tgr/bmon/) is a bandwidth monitor capable of retrieving statistics from various input modules.

```
$ sudo apt-get install bmon
```

When it's finished installing:

```
$ bmon
```

### Zip and Unzip

In my experience ZIP is great for creating archives for sharing via email or ftp. It's a universal format that almost everyone can open. I would NOT use ZIP for file backups. For large backups, see 7ZIP or TAR below.

```
$ sudo apt-get install zip
```

Zip up a folder:

```
$ zip uploads-backup.zip /wp-content/uploads
```

Unzip (extract) an archive:

```
$ unzip uploads-backup.zip /wp-content/uploadslanguage-bash
```

### 7ZIP

7ZIP is a very popular archiving program with excellent compression. Plus, it's open source and supports multiple operating systems.

```
$ sudo apt-get install p7zip
```

Create an archive

```
$ 7za a uploads-backup.7z /wp-content/uploads
```

Extract an archive

```
$ 7za e uploads-backup.7z /wp-content/uploads
```

### TAR (Tape Archive)

TAR - is the preferred way to handle file backups. I've read, the maximum allowed file size only depends on your hard drive. A disk formatted with FAT32 for example, only allows 2GB. You can also compress TAR using GZIP or BZ2.

```
$ tar -cvf uploads-backup.tar /wp-content --exclude='uploads/*'
```

GZIP - good compression, is very fast. Note: .tar.gz and .tgz are the same:

```
$ tar -cvzf uploads-backup.tgz /wp-content --exclude='uploads/*'
```

BZ2 - excellent compression, but slower. I find BZ2 works best if you're archiving a smaller directory. Note: .tar.bz2 and .tbz are the same:

```
$ tar -cvfj plugins-backup.tbz /wp-content --exclude='uploads/*'
```

Untar (extract) an archive and if tarball already contains a directory name, strip it:

```
$ tar -xvf -backup.tar -C /DESTINATION/FOLDER --strip-components=1
```

If you want to tarball the directory you're currently in, with say, gzip:

```
$ tar -cvzf backup.tar.gz .
```

### Other handy commands:

View all running services

```
$ service --status-all
```

Create a MySQL database backup

```
$ mysqldump --databases db1 db2 db3 > database_backup.sql
```

Restart PHP 7.0

```
$ sudo restart php7.0-fpm
```

Move files from one directory to another

```
$ mv -v /source-dir/* /destination-dir/
```

Copy files from one directory to another

```
$ cp -a /source-dir/. /destination-dir/
```

Note: You may need to reset permissions, since they will be copied over also.

```
$ sudo chmod -R 775 /PATH/TO/FOLDER
```

```
$ sudo chown -R www-data:www-data /PATH/TO/FOLDER
```

Set the server timezone

```
$ sudo dpkg-reconfigure tzdata
```

Add a user to the list of sudoers (you have to be logged in as root, or now the sudo password)

```
$ sudo adduser username sudo
```

Download files

```
$ wget http://example.com/wp-content/uploads/uploads-backup.tar
```

Local-to-server transfers with SCP

```
$ scp path/to/local-file user@remote-server.com:/path/to/server/folder
```

Server-to-local transfers with SCP (transfer entire directories)

```
$ scp -r user@remote-server.com:/path/to/server/folder /path/to/local/folder
```

Server-to-local transfers with SCP (transfer single file)

```
$ scp user@remote-server.com:/path/to/server/file /path/to/local/folder
```

Server-to-server transfers with SCP

```
$ scp -P 22 -r user@remote-server.com:path/to/remote/folder path/to/local/folder
```

Server-to-server transfer with SCP into the current directory (Read more about [SCP](https://help.ubuntu.com/community/SSH/TransferFiles))

```
$ scp -P 22 -r user@remote-server.com:path/to/remote/folder .
```

List size of directories

```
$ du -a -h --max-depth=1 | sort -hr
```

Set a password

```
$ sudo passwd ubuntu
```

### Edit PHP.ini

```
$ sudo nano /etc/php5/apache2/php.ini
```

Restart Apache

```
$ sudo /etc/init.d/apache2 restart
```

### Set Recursive Permissions for your websites directory

```
$ sudo chmod -R 775 /PATH/TO/FOLDER
```

```
$ sudo chown -R www-data:www-data /PATH/TO/FOLDER
```

### Block IP address using IPTABLES

Single IP

```
$ sudo iptables -I INPUT -s 192.168.100.1 -j DROP
```

IP Range

```
$ sudo iptables -I INPUT -s 192.168.100.0/24 -j DROP
```

You can also manage IPTABLES (e.g., the linux firewall) via Webmin under Networking -> Linux Firewall

### Manage packages

```
$ sudo apt-get update && sudo apt-get upgrade
$ sudo apt-get autoremove
```

### Remove LAMP

```
$ sudo apt-get purge libapache2-mod-auth-mysql phpmyadmin
sudo apt-get purge mysql-server mysql-server-5.1 mysql-server-core-5.1
sudo apt-get purge apache2 apache2-mpm-prefork apache2-utils apache2.2-bin apache2.2-common libapache2-mod-php5
sudo apt-get autoremove
```

### Serve your websites from an EBS volume

This practice has saved my butt on more than one occasion. Rather than use the given storage attached to the EC2 instance, I always create a 1TB EBS volume and mount it as `/public_html/`. That way, if your EC2 instance crashes...you're web site files will not. For this, we'll assume our attached EBS volume is `/xvdf/`.

Check out the [official documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html) from Amazon AWS

First you must be logged in as root:

```
$ su
```

Make sure you're in the file system root:

```
$ cd
```

Now, let's list all the attached drives. You should see `/dev/xvda1`, `/dev/xvdb`, `/dev/xvdf/` etc...

```
$ sudo fdisk -l
```

Let's make a directory (such as /public_html/)

```
$ mkdir /public_html/
```

Finally, let's mount our EBS volume:

```
$ mount -t ext4 /dev/xvdf /public_html/
```

Now you can serve your websites from an EBS volume!

### Benchmark the CPU

```
$ time for i in {0..10000}; do for j in {0..1000}; do :; done; done
```

### More resources:

- [What is Amazon EC2?](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html) (official user guides for Amazon AWS)
- [Setup Virtual Hosts in Webmin](https://gregrickaby.com/2011/06/how-to-create-virtual-servers-in-webmin-for-apache.html 'How To: Create Virtual Servers in Webmin')
- [http://www.ubuntugeek.com/step-by-step-ubuntu-11-04-natty-lamp-server-setup.html](http://www.ubuntugeek.com/step-by-step-ubuntu-11-04-natty-lamp-server-setup.html)
- [http://www.howtoforge.com/ubuntu_lamp_for_newbies](http://www.howtoforge.com/ubuntu_lamp_for_newbies)
- [http://www.techtickle.com/how-to-setup-lamp-on-ubuntu.html](http://www.techtickle.com/how-to-setup-lamp-on-ubuntu.html)
- [List of PHP accelerators](http://en.wikipedia.org/wiki/List_of_PHP_accelerators)
- [Distributed Caching with Memcached](http://www.linuxjournal.com/article/7451)
- [Run your own webradio station with Icecast](http://www.howtoforge.com/linux_webradio_with_icecast2_ices2)
- [How to recover a Linux EC2 Instance after being locked out](http://www.wifiz.co.uk/content/how-recover-linux-ec2-amazon-instance-lost-ssh-access-or-locked-out)
- [Install LAMP on Amazon EC2](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-LAMP.html)
- [Install and configure Cacti Monitor Tool in Ubuntu](http://www.ubuntugeek.com/install-and-configure-cacti-monitoring-tool-in-ubuntu-9-10-karmic-server.html)
- [Install NGIX instead of Apache](http://wiki.nginx.org/Install#Official_Debian.2FUbuntu_packages)
- [Install/Setup WordPress on Amazon EC2](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html)
- [RSYNC for transfers](http://www.cyberciti.biz/tips/linux-use-rsync-transfer-mirror-files-directories.html)
- [RSYNC commands](http://www.comentum.com/rsync.html)
- [Using Fail2Ban with IP Tables](http://www.the-art-of-web.com/system/fail2ban/)
- [http://www.tecmint.com/optimize-and-compress-jpeg-or-png-batch-images-linux-commandline/](http://www.tecmint.com/optimize-and-compress-jpeg-or-png-batch-images-linux-commandline/)
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/microphone-shootout-behringer-b-1-vs-neumann-tlm-103</guid>
              <title>Microphone Shootout: Behringer B-1 vs Neumann TLM 103</title>
              <description></description>
              <link>https://gregrickaby.com/posts/microphone-shootout-behringer-b-1-vs-neumann-tlm-103</link>
              <pubDate>2013-05-19T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
I'm a 15 year radio veteran. I've seen the debate between high-end and low-end microphones both in-person and on internet message boards. Usually, the argument ends with snide comment like: *"The Behringer is crap because it's only $100 bucks!"*... That's not very scientific, so I wanted to study this on a technical level.

In my office is a [Behringer B-1](http://amzn.to/1boeY7p). I purchased it new in 2001 from zzounds.com. It's widely known as a cheap, yet rugged starter microphone. I've use it to voice-track, cut voice-overs, and mic live instruments (the coolest being a 100 year-old cello). It's a tough microphone. The kind of microphone you can toss into the backseat on the way to a gig and not think twice.

The [Neumann TLM 103](http://amzn.to/1gBAeKA) is known as a high-end, yet affordable option for voice-over professionals. The Neumann name is known throughout the recording industry as _THE_ microphone for vocals. It's truly the Cadillac! There are three TLM 103's in the building, one in each production room. Many of our DJ's have them in their home studios too. Note: most radio stations wouldn't dare spend $1,100 on a production room microphone.

What you're about to see (and hear) is me talking into both microphones - _unedited_. To prove that I'm not swapping voice processors, you'll even hear me changing out the microphones. I personally have no stake in the argument, I'm an engineer. I simply wanted to introduce a more technical point-of-view.

I grabbed the following specifications from each respective website.

# Technical Specifications

**Behringer B-1**

- Type: Condenser
- Frequency Response: 20 Hz - 20 kHz
- Pickup Pattern: Cardioid
- Diaphragm: 1-inch pressure-gradient transducer capsule
- Power: 48v Phantom
- Construction: Ultra low-noise transformerless circuitry
- Price $99.00 USD ([Amazon](http://amzn.to/1boeY7p))
- [Website](<https://www.behringer.com/product.html?modelCode=P0142#googtrans(en%7Cen)>)

**Neumann TLM 103**

- Type: Condenser
- Frequency Response: 20 Hz - 20 kHz
- Pickup Pattern: Cardioid
- Diaphragm: 1-inch pressure-gradient transducer capsule
- Power: 48v Phantom
- Construction: Ultra low-noise transformerless circuitry
- Price: $1,099 USD ([Amazon](http://amzn.to/1gBAeKA))
- [Website](https://en-de.neumann.com/tlm-103)

Would you look at that? On paper, they both have the same specifications! Ok, I'm not going to dive into _exactly_ how those parts are made, or the quality of materials used...but they _should_ sound almost identical.

# Test 1: Basic Home Studio

[![home-studio-setup](/blog/images/home-studio-setup.jpg)](/blog/images/home-studio-setup.jpg)

With this test, I'm recreating a (very) basic home studio. There's no audio board, just the voice processor plugged into "Line-In" on the motherboard sound card. For both tests, the B-1 is set to "flat" as there is no low-frequency roll-off option on the TLM 103.

**Equipment:**

- Symetrix 528e Voice Processor
- On-Board High Definition Audio Card (Dell Optiplex 360)

**Adobe Audition Screen-shot:**

[![home-studio-audition](/blog/images/home-studio-audition.png)](/blog/images/home-studio-audition.png)

**Average Frequency Response:**

[![home-studio-audition-freq-b1](/blog/images/home-studio-audition-freq-b1.png)](/blog/images/home-studio-audition-freq-b1.png)

[![home-studio-audition-freq-tlm-103](/blog/images/home-studio-audition-freq-tlm-103.png)](/blog/images/home-studio-audition-freq-tlm-103.png)

### Listen

<audio preload="none" controls="controls">
  <source type="audio/mpeg" src="/blog/images/B1-vs-TLM-103-home-studio.mp3" />
</audio>

# Test 2: Production Room

[![production-room-setup](/blog/images/production-room-setup.jpg)](/blog/images/production-room-setup.jpg)

Now, let's move into a real-live-working production room at a radio station. This room is "Prod 3". It is used daily to voice-track shows and cut commercials. It features a flat-response 12-channel mixer, and a professional grade sound card - oh, and lots of foam on the walls.

_Note: I used the same exact Voice Processor in each test._

**Equipment:**

- Symetrix 528e Voice Processor
- Broadcast Tools ProMix 12
- Audio Science 4344 Sound Card

**Adobe Audition Screen-shot:**

[![production-room-audition](/blog/images/production-room-audition.png)](/blog/images/production-room-audition.png)

**Average Frequency Response:**

[![production-room-audition-freq-b1](/blog/images/production-room-audition-freq-b1.png)](/blog/images/production-room-audition-freq-b1.png)

[![production-room-audition-freq-tlm-103](/blog/images/production-room-audition-freq-tlm-103.png)](/blog/images/production-room-audition-freq-tlm-103.png)

### Listen

<audio preload="none" controls="controls">
  <source
    type="audio/mpeg"
    src="/blog/images/B1-vs-TLM-103-production-room.mp3"
  />
</audio>

# Conclusion

It's obvious the production room environment *sounds* better. However, that probably has nothing to do with the microphones. The supporting equipment makes difference! Using a $2,000 sound card, audio console, adding foam to the walls, etc... makes up that last 10%.

If you ask me, the [B-1](http://amzn.to/1boeY7p) sounds brighter and a bit punchy, while the [TLM 103](http://amzn.to/1gBAeKA) sounds warm and more mellow. Overall, they're not that far apart. (Really!) That's no surprise since their specifications and frequency responses are identical.

How? Quality of materials and parts used in construction.

What does that mean? Nothing. A Top-40 DJ might want to sound punchy, while a soft-rock DJ will want to sound warmer. Do you want to flaunt the name "Neumann" to owners of B-1's on messages boards? Or do you want to have a fantastic sounding microphone for less than $100? In the end, it's all about your budget and application.

A co-worker of mine, [John Garrett](https://www.facebook.com/john.g.yuhas), does voice-overs for a living. He started out with a [Behringer B-1](http://amzn.to/1boeY7p). He jokes all the time about how that "starter microphone" made him a living for many years. It wasn't until last year that he purchased a [TLM 103](http://amzn.to/1gBAeKA).

My advice is:

> Don't worry about the microphone, as much as the gear surrounding it.

- Buy a high-quality [sound card or mixer](https://amzn.to/3aXMhDG)  It will make your audio sound better - long before you hook-up the microphone!
- Buy an industry standard mic preamp like the [dbx 266xs](https://amzn.to/2uKZ2Rh) or [Symetrix 528e](http://amzn.to/GVhxVc).
- Use sound dampening foam in your studio/room.

When you're both successful and have some extra cash, then take the leap and get the [TLM 103](http://amzn.to/1gBAeKA). Just don't expect gigs to flood in because you own a $1,000 microphone.
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/remove-woocommerce-styles-and-scripts</guid>
              <title>Remove WooCommerce Styles and Scripts</title>
              <description></description>
              <link>https://gregrickaby.com/posts/remove-woocommerce-styles-and-scripts</link>
              <pubDate>2013-05-19T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
[WooCommerce](http://www.woothemes.com/woocommerce/) is absolutely *the most brilliant and easy-to-use shopping cart for WordPress* - but it's heavy! I'll show you how to remove the cruft!

## **Option 1**: Use a filter

There are a couple of ways to do this. The easiest is to remove the three primary stylesheets using a simple filter in `functions.php`

```php
add_filter( 'woocommerce_enqueue_styles', '__return_empty_array' );
```

## **Option 2**: A bit more control

If you want fine grain control over what appears where, then this function uses a conditional tag to dequeue styles and scripts.

```php
/**
 * Manage WooCommerce styles and scripts.
 */
function grd_woocommerce_script_cleaner() {

	// Remove the generator tag
	remove_action( 'wp_head', array( $GLOBALS['woocommerce'], 'generator' ) );

	// Unless we're in the store, remove all the cruft!
	if ( ! is_woocommerce() && ! is_cart() && ! is_checkout() ) {
		wp_dequeue_style( 'woocommerce_frontend_styles' );
		wp_dequeue_style( 'woocommerce-general');
		wp_dequeue_style( 'woocommerce-layout' );
		wp_dequeue_style( 'woocommerce-smallscreen' );
		wp_dequeue_style( 'woocommerce_fancybox_styles' );
		wp_dequeue_style( 'woocommerce_chosen_styles' );
		wp_dequeue_style( 'woocommerce_prettyPhoto_css' );
		wp_dequeue_script( 'selectWoo' );
		wp_deregister_script( 'selectWoo' );
		wp_dequeue_script( 'wc-add-payment-method' );
		wp_dequeue_script( 'wc-lost-password' );
		wp_dequeue_script( 'wc_price_slider' );
		wp_dequeue_script( 'wc-single-product' );
		wp_dequeue_script( 'wc-add-to-cart' );
		wp_dequeue_script( 'wc-cart-fragments' );
		wp_dequeue_script( 'wc-credit-card-form' );
		wp_dequeue_script( 'wc-checkout' );
		wp_dequeue_script( 'wc-add-to-cart-variation' );
		wp_dequeue_script( 'wc-single-product' );
		wp_dequeue_script( 'wc-cart' );
		wp_dequeue_script( 'wc-chosen' );
		wp_dequeue_script( 'woocommerce' );
		wp_dequeue_script( 'prettyPhoto' );
		wp_dequeue_script( 'prettyPhoto-init' );
		wp_dequeue_script( 'jquery-blockui' );
		wp_dequeue_script( 'jquery-placeholder' );
		wp_dequeue_script( 'jquery-payment' );
		wp_dequeue_script( 'fancybox' );
		wp_dequeue_script( 'jqueryui' );
	}
}
add_action( 'wp_enqueue_scripts', 'grd_woocommerce_script_cleaner', 99 );
```

## **Option 3**: Nuke it

Kill all the things, forever. You'll write your own styles, because you're a fucking ninja.

```php
/**
 * Remove all WooCommerce scripts and styles! Forever!
 */
function grd_remove_woocommerce_styles_scripts() {
	remove_action( 'wp_head', array( $GLOBALS['woocommerce'], 'generator' ) );
	remove_action( 'wp_enqueue_scripts', array( $GLOBALS['woocommerce'], 'frontend_scripts' ) );
}
define( 'WOOCOMMERCE_USE_CSS', false );
add_action( 'init', 'grd_remove_woocommerce_styles_scripts', 99 );
```

**Further reading:**

WooCommerce [has a page](http://docs.woothemes.com/document/disable-the-default-stylesheet/) dedicated for style & script management. Also, take a look at the [PHP Class](http://docs.woothemes.com/wc-apidocs/source-class-WC_Frontend_Scripts.html) responsible for enqueuing styles and scripts.

_Thanks to everyone who's suggested things in the comments. Peer code-review is amazing, and it's why I share this stuff._
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/safely-update-an-ubuntu-ec2-instance-on-amazon-aws</guid>
              <title>[Safely] Update an Ubuntu EC2 instance on Amazon AWS</title>
              <description></description>
              <link>https://gregrickaby.com/posts/safely-update-an-ubuntu-ec2-instance-on-amazon-aws</link>
              <pubDate>2013-05-19T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
[Ubuntu 12.04.1 LTS](http://www.ubuntu.com/download/server) was released, and that meant it was time to upgrade my Ubuntu EC2 instances from 11.10 to 12.04.1 LTS.

When I logged in via SSH I saw the nag to upgrade and thought, "crap...the last time I did this, I destroyed my EC2 instance". The upgrade went flawlessly this time because I created an AMI first, and after a few days I will delete that AMI and associated EBS volumes.

## Step 1: Backup

Create an Amazon Image (AMI) of your existing EC2 instance. If anything fails, you can simply launch the newly created AMI and re-associate your Elastic IP. _(You ARE using an Elastic IP, right?)_

## Step 2: Upgrade

When the AMI is finished, log into your EC2 instance via the terminal and start upgrade:

```bash
$ sudo apt-get update -y && do-release-upgrade
```
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/the-perfect-apc-configuration</guid>
              <title>The Perfect APC Configuration</title>
              <description></description>
              <link>https://gregrickaby.com/posts/the-perfect-apc-configuration</link>
              <pubDate>2013-05-19T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
Here was my setup on an Amazon Medium Instance using APC:

**php.ini configuration**

```
[APC]
extension=apc.so
apc.enabled=1
apc.shm_segments=1

;32M per WordPress install
apc.shm_size=128M

;Relative to the number of cached files (you may need to watch your stats for a day or two to find out a good number)
apc.num_files_hint=7000

;Relative to the size of WordPress
apc.user_entries_hint=4096

;The number of seconds a cache entry is allowed to idle in a slot before APC dumps the cache
apc.ttl=7200
apc.user_ttl=7200
apc.gc_ttl=3600

;Setting this to 0 will give you the best performance, as APC will
;not have to check the IO for changes. However, you must clear
;the APC cache to recompile already cached files. If you are still
;developing, updating your site daily in WP-ADMIN, and running W3TC
;set this to 1
apc.stat=1

;This MUST be 0, WP can have errors otherwise!
apc.include_once_override=0

;Only set to 1 while debugging
apc.enable_cli=0

;Allow 2 seconds after a file is created before it is cached to prevent users from seeing half-written/weird pages
apc.file_update_protection=2

;Leave at 2M or lower. WordPress does't have any file sizes close to 2M
apc.max_file_size=2M

;Ignore files
apc.filters = "/var/www/apc.php"

apc.cache_by_default=1
apc.use_request_time=1
apc.slam_defense=0
apc.mmap_file_mask=/var/www/temp/apc.XXXXXX
apc.stat_ctime=0
apc.canonicalize=1
apc.write_lock=1
apc.report_autofilter=0
apc.rfc1867=0
apc.rfc1867_prefix =upload_
apc.rfc1867_name=APC_UPLOAD_PROGRESS
apc.rfc1867_freq=0
apc.rfc1867_ttl=3600
apc.lazy_classes=0
apc.lazy_functions=0
```

While this configuration works great for me, it may not for you. Finding "The Perfect APC Configuration" is like asking how many stars are in the sky. The are endless variables, like, "How much RAM, how many websites, do your websites support lazy classes, etc..." The best way to create your config is to do a little research. This post was meant to give you a push in the right direction.

**P.S.** There seems to be a lot of debate about apc.stat = 0. The general thought is, set apc.stat=0 on production servers and it will prevent APC from actually going to the IO to check if the file has been changed. However, the WordPress dashboard and W3TC get kinda bitchy with this setting!

My advice: Are working in the WordPress dashboard daily, and running W3TC? Then set: `apc.stat = 1`. Your fragmentation will be higher. Your sites will load _slightly_ slower, but when you click _Update Post_, APC will flush that piece of cache.

**UPDATE 2013.08.01**

[PHP 5.5](http://php.net/archive/2013.php#id2013-07-18-1)\+ is out (and APC is deprecated) and with it comes the new [OPcache](http://www.php.net/manual/en/opcache.installation.php).
]]></content:encoded>
            </item>
          ,
            <item>
              <guid>https://gregrickaby.com/blogs/using-the-golden-ratio-and-rems</guid>
              <title>Web Typography: Using The Golden Ratio and REM's</title>
              <description></description>
              <link>https://gregrickaby.com/posts/using-the-golden-ratio-and-rems</link>
              <pubDate>2013-05-19T05:00:00.000Z</pubDate>
              <content:encoded><![CDATA[
When WordPress 3.5 beta 1 was released it came with, ["Twenty Twelve"](http://wordpress.org/extend/themes/twentytwelve). While looking at [style.css](http://core.trac.wordpress.org/browser/trunk/wp-content/themes/twentytwelve/style.css), I noticed the use of "REM" to set font sizes and margins. I had NO idea what an REM was. In fact, I just started using EM's in other child-themes. Immediately, I turned to Google and started researching.

## I thought REM was a band?

By definition, the [REM unit](http://www.w3.org/TR/css3-values/#rem-unit) is: *"Equal to the computed value of ‘font-size’ on the root element. When specified on the ‘font-size’ property of the root element, the ‘rem’ units refer to the property's initial value.*"

**TL;DR** The REM is one of the newest font-size standards for CSS3. It stands for "Root EM". You base your calculation on the _default font-size of the HTML element_ - NOT the parent like EM. **It's basically "EM v2.0".**

## So what?

The problem with Pixels are, they absolutely do-not-scale in Internet Explorer. Furthermore, with the onset of Responsive Web Design, having fonts that scale (in relation to the screen width) has become paramount. Percentages (%) and EM's are better, but they're tricky and compound. Still not an answer. A real solution?

## Use the REM

First you need to set a default "root" font-size variable:

```scss
html {
  font-size: 62.5%;
}
```

_Why 62.5% instead of 100%?_ Simplicity.

Our default font is now 10px, which makes math easier. Now, 1.0rem = 10px. This becomes our **$rembase**.

Calculate other font sizes by dividing your desired size by the `$rembase` (in pixels). Let's say, you want your `<h1>` tags to be 26px?

```scss
26 ÷ 10 = 2.6rem
```

or

```scss
32 ÷ 10 = 3.2rem
48 ÷ 10 = 4.8rem
```

and so on...Let's take a look at a sample Stylesheet:

```scss
/* $rembase = 10px */

html {
  font-size: 62.5%;
}

body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  font-size: 1rem; /* 10 ÷ $rembase */
}

h1,
h2 {
  font-size: 2.6rem; /* 26 ÷ $rembase */
}

h3,
h4 {
  font-size: 1.8rem; /* 18 ÷ $rembase */
}
```

That looks simple enough right? Just move the decimal. Now your fonts will scale perfectly during a browser re-size (if using responsive design), or if a user were to zoom in or out.

## But what about Line Height?

Line heights have always given me headaches, that was until Chris Pearson released his _Golden Ratio Typography Calculator_. Now, figuring out line heights (among other settings) is a snap.

1. Input your desired font size (16px)
2. Specify how wide your content box is (mine is 740px)
3. Click "Set my type!"

[The Golden Ratio Typography Calculator](http://www.pearsonified.com/typography/) spits out optimized typography values:

[![pearsons-golden-ratio-tool](/blog/images/pearsons-golden-ratio-tool.jpg)](http://www.pearsonified.com/typography/)

The calculator tells us our default line height should be 26px. This variable is the **$line-height-base.**

We're going to be using "[Unitless line heights](http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/)" as explained by Eric Meyer, so we can avoid unexpected results. What's so awesome about the unitless line height? You only have to specify it once in the `<body> `tag. Now, ALL other line height(s) are relative to the parent font-size. That's too easy! (Of course, you can still specify your own to maintain complete control.)

To calculate, you divide the **$line-height-base** by the font-size for that particular element (in pixels).

```scss
26 ÷ 16 = 1.625
```

How would that look in our sample style-sheet?

```scss
/*
$fontbase = 16
$line-height-base = 26
*/

html {
  font-size: 62.5%;
}

body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  font-size: 1.6rem;
  line-height: 1.625; /* $line-height-base ÷ $fontbase */
}

h1,
h2 {
  font-size: 2.6rem;
  line-height: 1; /* $line-height-base ÷ 26 */
}

h3,
h4 {
  font-size: 1.8rem;
  line-height: 1.444; /* $line-height-base ÷ 18 */
}
```

_Note: We'll only use three decimal places to right since most browsers only calculate that far._

## What about margins?

Yes, you can even use REM to set your margins. Margins, or "vertical spacing" is calculated using either 24px or 48px to maintain vertical rhythm. Let's divide 24px by our `$rembase:`

```scss
24 ÷ 10 = 2.4rem
```

Here's our sample stylesheet:

```scss
/*
$rembase = 10
$line-height-base = 26
*/

.some-div {
  margin: 2.4rem 0; /* 24 ÷ $rembase */
}

.another-div {
  padding: 4.8rem; /* 48 ÷ $rembase */
  margin-bottom: 2.4rem; /* 24 ÷ $rembase */
}
```

## I'm convinced, now tell me about browser support.

At the time of writing: REM's are supported in Firefox, Chrome, Safari, Opera and yes, even IE 9 & 10. It's also supported in all mobile browsers except for Opera Mini.

Check out this list: [http://caniuse.com/rem](http://caniuse.com/rem)

## What about fallbacks?

As is the case with most CSS3 wizardry, REM support in IE 6, 7, and 8 is lacking and will require a PX fallback. By declaring REM's after PX's in the CSS this example  will degrade gracefully to the PX:

```scss
html {
  font-size: 62.5;
}

body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  font-size: 16px;
  font-size: 1.6rem;
  line-height: 1.625;
}

h1,
h2 {
  font-size: 26px;
  font-size: 2.6rem;
}

h3,
h4 {
  font-size: 18px;
  font-size: 1.8rem;
  line-height: 1.444;
}

.some-div {
  margin: 24px 0;
  margin: 2.4rem 0;
}
```

The purpose of this post was not to stand on a soapbox and preach, but educate you on the advantages of using REM's to enhance the typography on your site. Your comments are welcome below.

### PX to REM Sass Mixin

```scss
// Create REM values with PX fall back
//
// Generate a REM with PX fallback from
// $baseFontSize. Enter the desired size based
// on pixels in numerical form. Supports shorthand.
//
// Forked from: http://codepen.io/thejameskyle/pen/JmBjc
//
// @author Greg Rickaby
// @since 1.0
//
// Usage: @include rem($property, $values);
// Example Usage:
//    @include rem(font-size, 16px);
//    @include rem(margin, 0 24px 0 12px);
//
// Outputs:
//    font-size: 16px;
//    font-size: 1.6rem;
//    margin: 0 24px 0 12px;
//    margin: 0 2.4rem 0 1.2rem;
// ----------------------------------
$baseFontSize: 10; // Based on HTML reset html { font-size: 62.5%; }

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px: ();
  $rem: ();

  $root: $baseFontSize;

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else if type-of($value) == number {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == 'px' {
        $px: append($px, $value);
        $rem: append($rem, ($val / $root + rem));
      }

      @if $unit == 'rem' {
        $px: append($px, ($val * $root + px));
        $rem: append($rem, $value);
      }
    } @else {
      $px: append($px, $value);
      $rem: append($rem, $value);
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

@function rem($value) {
  $root: $baseFontSize;
  $val: parseInt($value);
  $return: ();

  @if unit($value) == 'px' {
    $return: append($return, ($val / $root + rem));
  } @else {
    $return: append($return, ($val * $root + px));
  }

  @return $return;
}
```

### Further reading

https://www.youtube.com/watch?v=XbU-i1SE5JY

- [http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem)
- [http://blog.typekit.com/2011/11/09/type-study-sizing-the-legible-letter/](http://blog.typekit.com/2011/11/09/type-study-sizing-the-legible-letter/)
- [http://jsbin.com/acide4/8](http://jsbin.com/acide4/8)
- [http://offroadcode.com/prototypes/rem-calculator/](http://offroadcode.com/prototypes/rem-calculator/)
]]></content:encoded>
            </item>
          
      </channel>
    </rss>
  